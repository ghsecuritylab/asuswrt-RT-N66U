#include "base.h"
#include "log.h"
#include "buffer.h"
#include "response.h"

#include "plugin.h"

#include "stream.h"
#include "stat_cache.h"

#include "sys-mmap.h"

#include <sys/types.h>
#include <sys/stat.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <assert.h>

#include <unistd.h>
#include <dirent.h>

#include <sys/shm.h>
int shmid;
void* shared_memory = (void*)0;

#ifdef SOURCEINSIGH
	server *srv;
	connection *con;
	void *p_d;
#endif

// smb client api header
#include <unistd.h> 

#include <dirent.h>

#include "libsmbclient.h"
#include "mod_smbdav.h"

#define DBG_ENABLE_MOD_SMBDAV 1
#define DBE	DBG_ENABLE_MOD_SMBDAV

//#define SCAN_MASTER_BROWSER

extern handler_t ntlm_authentication_handler(server *srv, connection *con, plugin_data *p);
extern handler_t basic_authentication_handler(server *srv, connection *con, plugin_data *p);

static int is_host2(char *uri)
{
	char pWorkgroup[30]={0};
	char pServer[64]={0};
	char pShare[128]={0};
	char pPath[128]={0};
	smbc_parse_path(uri, pWorkgroup, pServer, pShare, pPath);

	struct cli_state *cli;

	if(pServer[0] == '\0')
		return 0;
	
	cli = smbc_cli_initialize();

	uint32_t res = smbc_cli_connect(cli, pServer, SMB_PORT);
	if(res) {
		res = smbc_cli_connect(cli, pServer, NMB_PORT);
	}
Cdbg(DBE, "%s can %sbe connected..", uri, (res) ? "not " : "");
	smbc_cli_shutdown(cli);

	return !res;
}

static int is_host(char *host)
{
	struct cli_state *cli;
	cli = smbc_cli_initialize();

	uint32_t res = smbc_cli_connect(cli, host, SMB_PORT);

	smbc_cli_shutdown(cli);

	return !res;
}

static void start_arpping_process(const char* scan_interface)
{
	if(system("pidof lighttpd-arpping") == 0)
		return;

	char cmd[BUFSIZ]="\0";
	/*
	char mybuffer[BUFSIZ]="\0";
	FILE* fp = popen("pwd", "r");
	if(fp){
		int len = fread(mybuffer, sizeof(char), BUFSIZ, fp);
		mybuffer[len-1]="\0";
		pclose(fp);

		sprintf(cmd, ".%s/_inst/sbin/lighttpd-arpping -f %s &", mybuffer, scan_interface);
		Cdbg(DBE, "%s, len=%d", cmd, len);
		system(cmd);
	}
	*/
	//sprintf(cmd, "./_inst/sbin/lighttpd-arpping -f %s &", scan_interface);
	sprintf(cmd, "lighttpd-arpping -f %s &", scan_interface);
	system(cmd);
}

static void stop_arpping_process()
{
	char mybuffer[BUFSIZ]="\0";
	char cmd[BUFSIZ]="\0";
	int chars_read;
	FILE* read_fp = popen("pidof lighttpd-arpping", "r");
	if(read_fp!=NULL){
		chars_read = fread(mybuffer, sizeof(char), BUFSIZ, read_fp);
		if(chars_read>0){
			sprintf(cmd, "kill -9 %s", mybuffer);
			Cdbg(DBE, "%s", cmd);
			system(cmd);
		}	
		pclose(read_fp);
	}
}

/* simple combsort algorithm */
void smbc_dirls_sort(smbc_dirls_entry_t **ent, int num) {
	int gap = num;
	int i, j;
	int swapped;
	smbc_dirls_entry_t *tmp;

	do {
		gap = (gap * 10) / 13;
		if (gap == 9 || gap == 10)
			gap = 11;
		if (gap < 1)
			gap = 1;
		swapped = 0;

		for (i = 0; i < num - gap; i++) {
			j = i + gap;
			if (strcmp(DIRLIST_ENT_NAME(ent[i]), DIRLIST_ENT_NAME(ent[j])) > 0) {
				tmp = ent[i];
				ent[i] = ent[j];
				ent[j] = tmp;
				swapped = 1;
			}
		}

	} while (gap > 1 || swapped);
}

/* buffer must be able to hold "999.9K"
 * conversion is simple but not perfect
 */
int smbc_list_directory_sizefmt(char *buf, off_t size) 
{
	const char unit[] = "KMGTPE";	/* Kilo, Mega, Tera, Peta, Exa */
	const char *u = unit - 1;		/* u will always increment at least once */
	int remain;
	char *out = buf;

	if (size < 100)
		size += 99;
	if (size < 100)
		size = 0;

	while (1) {
		remain = (int) size & 1023;
		size >>= 10;
		u++;
		if ((size & (~0 ^ 1023)) == 0)
			break;
	}

	remain /= 100;
	if (remain > 9)
		remain = 9;
	if (size > 999) {
		size   = 0;
		remain = 9;
		u++;
	}

	out   += LI_ltostr(out, size);
	out[0] = '.';
	out[1] = remain + '0';
	out[2] = *u;
	out[3] = '\0';
	
	return (out + 3 - buf);	
}

static void get_auth_data_fn(const char * pServer,
                 const char * pShare,
                 char * pWorkgroup,
                 int maxLenWorkgroup,
                 char * pUsername,
                 int maxLenUsername,
                 char * pPassword,
                 int maxLenPassword)
{
	UNUSED(pServer);
	UNUSED(pShare);
	UNUSED(maxLenWorkgroup);
	UNUSED(maxLenUsername);
	UNUSED(maxLenPassword);
	
	UNUSED(pWorkgroup);
	UNUSED(pUsername);
	UNUSED(pPassword);
}

/* init the plugin data */
INIT_FUNC(mod_smbdav_init) {

	plugin_data *p;
	
	p = calloc(1, sizeof(*p));

	
	p->tmp_buf = buffer_init();

	p->uri.scheme = buffer_init();
	p->uri.path_raw = buffer_init();
	p->uri.path = buffer_init();
	p->uri.authority = buffer_init();

	p->physical.path = buffer_init();
	p->physical.rel_path = buffer_init();
	p->physical.doc_root = buffer_init();
	p->physical.basedir = buffer_init();
		
	int          dbglv = 9;
	smbc_init(get_auth_data_fn, dbglv);
	
	return p;
}

URIHANDLER_FUNC(mod_msbdav_connection_close) {	
	UNUSED(srv);
	
	if(con->smb_info->cli != NULL) {
		smbc_cli_shutdown(con->smb_info->cli);
	}

	return HANDLER_GO_ON;
}

/* detroy the plugin data */
FREE_FUNC(mod_smbdav_free) {
	plugin_data *p = p_d;

	UNUSED(srv);

	if (!p) return HANDLER_GO_ON;

	if (p->config_storage) {
		size_t i;
		for (i = 0; i < srv->config_context->used; i++) {
			plugin_config *s = p->config_storage[i];

			if (!s) continue;

			buffer_free(s->sqlite_db_name);
#ifdef USE_PROPPATCH
			if (s->sql) {
				sqlite3_finalize(s->stmt_delete_prop);
				sqlite3_finalize(s->stmt_delete_uri);
				sqlite3_finalize(s->stmt_copy_uri);
				sqlite3_finalize(s->stmt_move_uri);
				sqlite3_finalize(s->stmt_update_prop);
				sqlite3_finalize(s->stmt_select_prop);
				sqlite3_finalize(s->stmt_select_propnames);

				sqlite3_finalize(s->stmt_read_lock);
				sqlite3_finalize(s->stmt_read_lock_by_uri);
				sqlite3_finalize(s->stmt_create_lock);
				sqlite3_finalize(s->stmt_remove_lock);
				sqlite3_finalize(s->stmt_refresh_lock);
				sqlite3_close(s->sql);
			}
#endif
			free(s);
		}
		free(p->config_storage);
	}

	buffer_free(p->uri.scheme);
	buffer_free(p->uri.path_raw);
	buffer_free(p->uri.path);
	buffer_free(p->uri.authority);

	buffer_free(p->physical.path);
	buffer_free(p->physical.rel_path);
	buffer_free(p->physical.doc_root);
	buffer_free(p->physical.basedir);

	buffer_free(p->tmp_buf);

	free(p);

	stop_arpping_process();
		
	return HANDLER_GO_ON;
}

/* handle plugin config and check values */

SETDEFAULTS_FUNC(mod_smbdav_set_defaults) {
	plugin_data *p = p_d;
	size_t i = 0;

	config_values_t cv[] = {
		{ "smbdav.activate",            NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },       /* 0 */
		{ "smbdav.is-readonly",         NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },       /* 1 */
		{ "smbdav.sqlite-db-name",      NULL, T_CONFIG_STRING,  T_CONFIG_SCOPE_CONNECTION },       /* 2 */
		{ "smbdav.log-xml",             NULL, T_CONFIG_BOOLEAN, T_CONFIG_SCOPE_CONNECTION },       /* 3 */
		{ NULL,                         NULL, T_CONFIG_UNSET, T_CONFIG_SCOPE_UNSET }
	};

	if (!p) return HANDLER_ERROR;

	p->config_storage = calloc(1, srv->config_context->used * sizeof(specific_config *));

	for (i = 0; i < srv->config_context->used; i++) {
		plugin_config *s;

		s = calloc(1, sizeof(plugin_config));
		s->sqlite_db_name = buffer_init();

		cv[0].destination = &(s->enabled);
		cv[1].destination = &(s->is_readonly);
		cv[2].destination = s->sqlite_db_name;
		cv[3].destination = &(s->log_xml);

		p->config_storage[i] = s;

		if (0 != config_insert_values_global(srv, ((data_config *)srv->config_context->data[i])->value, cv)) {
			return HANDLER_ERROR;
		}

		if (!buffer_is_empty(s->sqlite_db_name)) {
#ifdef USE_PROPPATCH
			const char *next_stmt;
			char *err;

			if (SQLITE_OK != sqlite3_open(s->sqlite_db_name->ptr, &(s->sql))) {
				log_error_write(srv, __FILE__, __LINE__, "sbs", "sqlite3_open failed for",
						s->sqlite_db_name,
						sqlite3_errmsg(s->sql));
				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_exec(s->sql,
					"CREATE TABLE properties ("
					"  resource TEXT NOT NULL,"
					"  prop TEXT NOT NULL,"
					"  ns TEXT NOT NULL,"
					"  value TEXT NOT NULL,"
					"  PRIMARY KEY(resource, prop, ns))",
					NULL, NULL, &err)) {

				if (0 != strcmp(err, "table properties already exists")) {
					log_error_write(srv, __FILE__, __LINE__, "ss", "can't open transaction:", err);
					sqlite3_free(err);

					return HANDLER_ERROR;
				}
				sqlite3_free(err);
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("SELECT value FROM properties WHERE resource = ? AND prop = ? AND ns = ?"),
				&(s->stmt_select_prop), &next_stmt)) {
				/* prepare failed */

				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed:", sqlite3_errmsg(s->sql));
				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("SELECT ns, prop FROM properties WHERE resource = ?"),
				&(s->stmt_select_propnames), &next_stmt)) {
				/* prepare failed */

				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed:", sqlite3_errmsg(s->sql));
				return HANDLER_ERROR;
			}


			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("REPLACE INTO properties (resource, prop, ns, value) VALUES (?, ?, ?, ?)"),
				&(s->stmt_update_prop), &next_stmt)) {
				/* prepare failed */

				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed:", sqlite3_errmsg(s->sql));
				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("DELETE FROM properties WHERE resource = ? AND prop = ? AND ns = ?"),
				&(s->stmt_delete_prop), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("DELETE FROM properties WHERE resource = ?"),
				&(s->stmt_delete_uri), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("INSERT INTO properties SELECT ?, prop, ns, value FROM properties WHERE resource = ?"),
				&(s->stmt_copy_uri), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("UPDATE properties SET resource = ? WHERE resource = ?"),
				&(s->stmt_move_uri), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			/* LOCKS */

			if (SQLITE_OK != sqlite3_exec(s->sql,
					"CREATE TABLE locks ("
					"  locktoken TEXT NOT NULL,"
					"  resource TEXT NOT NULL,"
					"  lockscope TEXT NOT NULL,"
					"  locktype TEXT NOT NULL,"
					"  owner TEXT NOT NULL,"
					"  depth INT NOT NULL,"
					"  timeout TIMESTAMP NOT NULL,"
					"  PRIMARY KEY(locktoken))",
					NULL, NULL, &err)) {

				if (0 != strcmp(err, "table locks already exists")) {
					log_error_write(srv, __FILE__, __LINE__, "ss", "can't open transaction:", err);
					sqlite3_free(err);

					return HANDLER_ERROR;
				}
				sqlite3_free(err);
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("INSERT INTO locks (locktoken, resource, lockscope, locktype, owner, depth, timeout) VALUES (?,?,?,?,?,?, CURRENT_TIME + 600)"),
				&(s->stmt_create_lock), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("DELETE FROM locks WHERE locktoken = ?"),
				&(s->stmt_remove_lock), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("SELECT locktoken, resource, lockscope, locktype, owner, depth, timeout FROM locks WHERE locktoken = ?"),
				&(s->stmt_read_lock), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("SELECT locktoken, resource, lockscope, locktype, owner, depth, timeout FROM locks WHERE resource = ?"),
				&(s->stmt_read_lock_by_uri), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}

			if (SQLITE_OK != sqlite3_prepare(s->sql,
				CONST_STR_LEN("UPDATE locks SET timeout = CURRENT_TIME + 600 WHERE locktoken = ?"),
				&(s->stmt_refresh_lock), &next_stmt)) {
				/* prepare failed */
				log_error_write(srv, __FILE__, __LINE__, "ss", "sqlite3_prepare failed", sqlite3_errmsg(s->sql));

				return HANDLER_ERROR;
			}


#else
			log_error_write(srv, __FILE__, __LINE__, "s", "Sorry, no sqlite3 and libxml2 support include, compile with --with-smbdav-props");
			return HANDLER_ERROR;
#endif
		}
	}

	return HANDLER_GO_ON;
}

#define PATCH_OPTION(x) \
	p->conf.x = s->x;
static int mod_smbdav_patch_connection(server *srv, connection *con, plugin_data *p) {
	size_t i, j;
	plugin_config *s = p->config_storage[0];

	PATCH_OPTION(enabled);
	PATCH_OPTION(is_readonly);
	PATCH_OPTION(log_xml);
	//PATCH_OPTION(always_auth);
	
#ifdef USE_PROPPATCH
	PATCH_OPTION(sql);
	PATCH_OPTION(stmt_update_prop);
	PATCH_OPTION(stmt_delete_prop);
	PATCH_OPTION(stmt_select_prop);
	PATCH_OPTION(stmt_select_propnames);

	PATCH_OPTION(stmt_delete_uri);
	PATCH_OPTION(stmt_move_uri);
	PATCH_OPTION(stmt_copy_uri);

	PATCH_OPTION(stmt_remove_lock);
	PATCH_OPTION(stmt_refresh_lock);
	PATCH_OPTION(stmt_create_lock);
	PATCH_OPTION(stmt_read_lock);
	PATCH_OPTION(stmt_read_lock_by_uri);
#endif
	/* skip the first, the global context */
	for (i = 1; i < srv->config_context->used; i++) {
		data_config *dc = (data_config *)srv->config_context->data[i];
		s = p->config_storage[i];

		/* condition didn't match */
		if (!config_check_cond(srv, con, dc)) continue;

		/* merge config */
		for (j = 0; j < dc->value->used; j++) {
			data_unset *du = dc->value->data[j];

			if (buffer_is_equal_string(du->key, CONST_STR_LEN("smbdav.activate"))) {
				PATCH_OPTION(enabled);
			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("smbdav.is-readonly"))) {
				PATCH_OPTION(is_readonly);
			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("smbdav.log-xml"))) {
				PATCH_OPTION(log_xml);
			//} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("smbdav.always-auth"))) {
			//	PATCH_OPTION(always_auth);			
			} else if (buffer_is_equal_string(du->key, CONST_STR_LEN("smbdav.sqlite-db-name"))) {
#ifdef USE_PROPPATCH
				PATCH_OPTION(sql);
				PATCH_OPTION(stmt_update_prop);
				PATCH_OPTION(stmt_delete_prop);
				PATCH_OPTION(stmt_select_prop);
				PATCH_OPTION(stmt_select_propnames);

				PATCH_OPTION(stmt_delete_uri);
				PATCH_OPTION(stmt_move_uri);
				PATCH_OPTION(stmt_copy_uri);

				PATCH_OPTION(stmt_remove_lock);
				PATCH_OPTION(stmt_refresh_lock);
				PATCH_OPTION(stmt_create_lock);
				PATCH_OPTION(stmt_read_lock);
				PATCH_OPTION(stmt_read_lock_by_uri);
#endif
			}
		}
	}

	return 0;
}

URIHANDLER_FUNC(mod_smbdav_uri_handler) {
	plugin_data *p = p_d;

	if (con->uri.path->used == 0) 
		return HANDLER_GO_ON;

	mod_smbdav_patch_connection(srv, con, p);

	if (!p->conf.enabled) 
		return HANDLER_GO_ON;
	
	char pWorkgroup[30]={0};
	char pServer[64]={0};
	char pShare[128]={0};
	char pPath[128]={0};
	smbc_parse_path(con->physical.path->ptr, pWorkgroup, pServer, pShare, pPath);
	
	switch (con->request.http_method) {
	case HTTP_METHOD_OPTIONS:
		/* we fake a little bit but it makes MS W2k happy and it let's us mount the volume */
		response_header_overwrite(srv, con, CONST_STR_LEN("DAV"), CONST_STR_LEN("1,2"));
		response_header_overwrite(srv, con, CONST_STR_LEN("MS-Author-Via"), CONST_STR_LEN("DAV"));

		if (p->conf.is_readonly) {
			response_header_insert(srv, con, CONST_STR_LEN("Allow"), CONST_STR_LEN("PROPFIND"));
		} else {
			response_header_insert(srv, con, CONST_STR_LEN("Allow"), CONST_STR_LEN("PROPFIND, DELETE, MKCOL, PUT, MOVE, COPY, PROPPATCH, LOCK, UNLOCK"));
		}
		break;
	default:
		break;
	}

	/* not found */
	

	return HANDLER_GO_ON;
}
static int smbdav_gen_prop_tag(server *srv, connection *con,
		char *prop_name,
		char *prop_ns,
		char *value,
		buffer *b) {

	UNUSED(srv);
	UNUSED(con);

	if (value) {
		buffer_append_string_len(b,CONST_STR_LEN("<"));
		buffer_append_string(b, prop_name);
		buffer_append_string_len(b, CONST_STR_LEN(" xmlns=\""));
		buffer_append_string(b, prop_ns);
		buffer_append_string_len(b, CONST_STR_LEN("\">"));

		buffer_append_string(b, value);

		buffer_append_string_len(b,CONST_STR_LEN("</"));
		buffer_append_string(b, prop_name);
		buffer_append_string_len(b, CONST_STR_LEN(">"));
	} else {
		buffer_append_string_len(b,CONST_STR_LEN("<"));
		buffer_append_string(b, prop_name);
		buffer_append_string_len(b, CONST_STR_LEN(" xmlns=\""));
		buffer_append_string(b, prop_ns);
		buffer_append_string_len(b, CONST_STR_LEN("\"/>"));
	}

	return 0;
}


static int smbdav_gen_response_status_tag(server *srv, connection *con, physical *dst, int status, buffer *b) {
	UNUSED(srv);

	buffer_append_string_len(b,CONST_STR_LEN("<D:response xmlns:ns0=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:href>\n"));
	buffer_append_string_buffer(b, dst->rel_path);
	buffer_append_string_len(b,CONST_STR_LEN("</D:href>\n"));
	buffer_append_string_len(b,CONST_STR_LEN("<D:status>\n"));

	if (con->request.http_version == HTTP_VERSION_1_1) {
		buffer_copy_string_len(b, CONST_STR_LEN("HTTP/1.1 "));
	} else {
		buffer_copy_string_len(b, CONST_STR_LEN("HTTP/1.0 "));
	}
	buffer_append_long(b, status);
	buffer_append_string_len(b, CONST_STR_LEN(" "));
	buffer_append_string(b, get_http_status_name(status));

	buffer_append_string_len(b,CONST_STR_LEN("</D:status>\n"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:response>\n"));

	return 0;
}

static int smbdav_delete_file(server *srv, connection *con, plugin_data *p, physical *dst, buffer *b) 
{
	int status = 0;

	/* try to unlink it */
	if (-1 == smbc_wrapper_unlink(con, dst->path->ptr)) {
		switch(errno) {
		case EACCES:
		case EPERM:
			/* 403 */
			status = 403;
			break;
		default:
			status = 501;
			break;
		}
		smbdav_gen_response_status_tag(srv, con, dst, status, b);
	} else {
#ifdef USE_PROPPATCH
		sqlite3_stmt *stmt = p->conf.stmt_delete_uri;

		if (!stmt) {
			status = 403;
			smbdav_gen_response_status_tag(srv, con, dst, status, b);
		} else {
			sqlite3_reset(stmt);

			/* bind the values to the insert */

			sqlite3_bind_text(stmt, 1,
					  dst->rel_path->ptr,
					  dst->rel_path->used - 1,
					  SQLITE_TRANSIENT);

			if (SQLITE_DONE != sqlite3_step(stmt)) {
				/* */
			}
		}
#else
		UNUSED(p);
#endif
	}

	return (status != 0);
}

static int smbdav_delete_dir(server *srv, connection *con, plugin_data *p, physical *dst, buffer *b) 
{
	DIR *dir;
	int have_multi_status = 0;
	physical d;

	d.path = buffer_init();
	d.rel_path = buffer_init();
	
	if (NULL != (dir = smbc_wrapper_opendir(con, dst->path->ptr))) {
		struct smbc_dirent *de;

		while(NULL != (de = smbc_wrapper_readdir(con, dir))) {
			struct stat st;
			int status = 0;

			if ((de->name[0] == '.' && de->name[1] == '\0')  ||
			    (de->name[0] == '.' && de->name[1] == '.' && de->name[2] == '\0')) {
				continue;
				/* ignore the parent dir */
			}
			
			buffer_copy_string_buffer(d.path, dst->path);
			BUFFER_APPEND_SLASH(d.path);
			buffer_append_string(d.path, de->name);

			buffer_copy_string_buffer(d.rel_path, dst->rel_path);
			BUFFER_APPEND_SLASH(d.rel_path);
			buffer_append_string(d.rel_path, de->name);
			
			/* stat and unlink afterwards */
			if (-1 == smbc_wrapper_stat(con, d.path->ptr, &st)) {
				/* don't about it yet, rmdir will fail too */
			} else if (S_ISDIR(st.st_mode)) {				
				have_multi_status = smbdav_delete_dir(srv, con, p, &d, b);

				/* try to unlink it */
				if (-1 == smbc_wrapper_rmdir(con, d.path->ptr)) {
					switch(errno) {
					case EACCES:
					case EPERM:
						/* 403 */
						status = 403;
						break;
					default:
						status = 501;
						break;
					}
					have_multi_status = 1;

					smbdav_gen_response_status_tag(srv, con, &d, status, b);
				} else {
#ifdef USE_PROPPATCH
					sqlite3_stmt *stmt = p->conf.stmt_delete_uri;

					status = 0;

					if (stmt) {
						sqlite3_reset(stmt);

						/* bind the values to the insert */

						sqlite3_bind_text(stmt, 1,
								  d.rel_path->ptr,
								  d.rel_path->used - 1,
								  SQLITE_TRANSIENT);

						if (SQLITE_DONE != sqlite3_step(stmt)) {
							/* */
						}
					}
#endif
				}
			} else {
				have_multi_status = smbdav_delete_file(srv, con, p, &d, b);
			}
		}
		smbc_wrapper_closedir(con, dir);

		buffer_free(d.path);
		buffer_free(d.rel_path);
	}

	return have_multi_status;
}

static int smbdav_copy_file(server *srv, connection *con, plugin_data *p, physical *src, physical *dst, int overwrite) 
{		
	int status = 0, ret, src_fd = -1, dst_fd = -1;
	char buff[2048]; 

	UNUSED(srv);
	UNUSED(con);
	Cdbg(DBE,".....Jerry: start basic_copy_file, src = [%s]", src->path->ptr);
	Cdbg(DBE,".....Jerry: start basic_copy_file, dst = [%s]", dst->path->ptr);
	
	if (-1 == (dst_fd = smbc_open(dst->path->ptr, O_WRONLY|O_TRUNC|O_CREAT|(overwrite ? 0 : O_EXCL), WEBDAV_FILE_MODE))) {
		/* opening the destination failed for some reason */
		switch(errno) {
		case EEXIST:
			status = 412;
			break;
		case EISDIR:
			status = 409;
			break;
		case ENOENT:
			/* at least one part in the middle wasn't existing */
			status = 409;
			break;
		default:
			status = 403;
			break;
		}
		smbc_close(dst_fd);
		return status;
	}
		
	if (src_fd = smbc_open(src->path->ptr, O_RDONLY, WEBDAV_FILE_MODE)) {
		do {
			ret = smbc_read(src_fd, buff, sizeof(buff));
			if (ret > 0) {
				if (-1 == smbc_write(dst_fd, buff, ret)) {
					switch(errno) {
					case ENOSPC:
						status = 507;
						break;
					default:
						status = 403;
						break;
					}

					smbc_close(src_fd);
					smbc_close(dst_fd);
					return status;
				}
			}
		} while (ret > 0);
	}
	
	smbc_close(src_fd);
	smbc_close(dst_fd);

#ifdef USE_PROPPATCH
	if (0 == status) {
		/* copy worked fine, copy connected properties */
		sqlite3_stmt *stmt = p->conf.stmt_copy_uri;

		if (stmt) {
			sqlite3_reset(stmt);

			/* bind the values to the insert */
			sqlite3_bind_text(stmt, 1,
					  dst->rel_path->ptr,
					  dst->rel_path->used - 1,
					  SQLITE_TRANSIENT);

			sqlite3_bind_text(stmt, 2,
					  src->rel_path->ptr,
					  src->rel_path->used - 1,
					  SQLITE_TRANSIENT);

			if (SQLITE_DONE != sqlite3_step(stmt)) {
				/* */
			}
		}
	}
#else
	UNUSED(p);
#endif
	
	return status;
}

static int smbdav_copy_dir(server *srv, connection *con, plugin_data *p, physical *src, physical *dst, int overwrite) 
{
	DIR *srcdir;
	int status = 0;

	Cdbg(DBE,".....1Jerry: basic_copy_dir %s -> %s", src->path->ptr, dst->path->ptr);
	Cdbg(DBE,".....2Jerry: basic_copy_dir %s -> %s", src->rel_path->ptr, dst->rel_path->ptr);
	Cdbg(DBE,".....3Jerry: smbc_opendir %s", src->path->ptr);

	if (NULL != (srcdir = smbc_wrapper_opendir(con, src->path->ptr))) {
		struct smbc_dirent *de;
		physical s, d;

		s.path = buffer_init();
		s.rel_path = buffer_init();

		d.path = buffer_init();
		d.rel_path = buffer_init();

		while (NULL != (de = smbc_wrapper_readdir(con, srcdir))) {
			struct stat st;

			if( (de->name[0] == '.' && de->name[1] == '\0') ||
		        (de->name[0] == '.' && de->name[1] == '.' && de->name[2] == '\0')) {
				continue;
			}
			
			buffer_copy_string_buffer(s.path, src->path);
			BUFFER_APPEND_SLASH(s.path);
			buffer_append_string(s.path, de->name);

			buffer_copy_string_buffer(d.path, dst->path);
			BUFFER_APPEND_SLASH(d.path);
			buffer_append_string(d.path, de->name);
			
			buffer_copy_string_buffer(s.rel_path, src->rel_path);
			BUFFER_APPEND_SLASH(s.rel_path);
			buffer_append_string(s.rel_path, de->name);

			buffer_copy_string_buffer(d.rel_path, dst->rel_path);
			BUFFER_APPEND_SLASH(d.rel_path);
			buffer_append_string(d.rel_path, de->name);
			
			Cdbg(DBE,".....4Jerry: smbc_readdir [%s], %s, %s -> %s, %s", 
				    de->name,
					s.path->ptr,
					s.rel_path->ptr, 
					d.path->ptr,
				    d.rel_path->ptr);
			
			if (-1 == smbc_wrapper_stat(con, s.path->ptr, &st)) {
				/* why ? */
			} else if (S_ISDIR(st.st_mode)) {
				/* a directory */
				if (-1 == smbc_wrapper_mkdir(con, dst->path->ptr, WEBDAV_DIR_MODE) &&
				    errno != EEXIST) {
					/* WTH ? */
				} else {
#ifdef USE_PROPPATCH
					sqlite3_stmt *stmt = p->conf.stmt_copy_uri;

					Cdbg(DBE,".....5Jerry: start basic_copy_dir");
					
					if (0 != (status = smbdav_copy_dir(srv, con, p, &s, &d, overwrite))) {
						Cdbg(DBE,".....Jerry: start basic_copy_dir fail");
						break;
					}
					
					/* directory is copied, copy the properties too */
					if (stmt) {
						sqlite3_reset(stmt);

						/* bind the values to the insert */
						sqlite3_bind_text(stmt, 1,
							  dst->rel_path->ptr,
							  dst->rel_path->used - 1,
							  SQLITE_TRANSIENT);

						sqlite3_bind_text(stmt, 2,
							  src->rel_path->ptr,
							  src->rel_path->used - 1,
							  SQLITE_TRANSIENT);

						if (SQLITE_DONE != sqlite3_step(stmt)) {
							/* */
						}
					}
#endif
				}
			} 
			else if (S_ISREG(st.st_mode)) {				
				/* a plain file */
				if (0 != (status = smbdav_copy_file(srv, con, p, &s, &d, overwrite))) {
				//if (0 != (status = basic_copy_file(srv, con, p, &s, dst, overwrite))) {
					Cdbg(DBE,".....Jerry: basic_copy_dir -> basic_copy_file fail.........break");
					break;
				}
			}
		}

		buffer_free(s.path);
		buffer_free(s.rel_path);
		buffer_free(d.path);
		buffer_free(d.rel_path);

		smbc_wrapper_closedir(con, srcdir);

		Cdbg(DBE,".....6Jerry: smbc_opendir finish");
	}

	return status;
}

static int smbdav_get_live_property(server *srv, connection *con, plugin_data *p, physical *dst, char *prop_name, buffer *b) {
	stat_cache_entry *sce = NULL;
	int found = 0;

	UNUSED(p);
	
	if (HANDLER_ERROR != (stat_cache_get_entry(srv, con, dst->path, &sce))) {
		char ctime_buf[] = "2005-08-18T07:27:16Z";
		char mtime_buf[] = "Thu, 18 Aug 2005 07:27:16 GMT";
		size_t k;
		
		if (0 == strcmp(prop_name, "resourcetype")) {
			if (S_ISDIR(sce->st.st_mode)) {
				buffer_append_string_len(b, CONST_STR_LEN("<D:resourcetype><D:collection/></D:resourcetype>"));
				found = 1;
			}
		} else if (0 == strcmp(prop_name, "getcontenttype")) {
			if (S_ISDIR(sce->st.st_mode)) {
				buffer_append_string_len(b, CONST_STR_LEN("<D:getcontenttype>httpd/unix-directory</D:getcontenttype>"));
				found = 1;
			} else if(S_ISREG(sce->st.st_mode)) {
				for (k = 0; k < con->conf.mimetypes->used; k++) {
					data_string *ds = (data_string *)con->conf.mimetypes->data[k];

					if (ds->key->used == 0) continue;

					if (buffer_is_equal_right_len(dst->path, ds->key, ds->key->used - 1)) {
						buffer_append_string_len(b,CONST_STR_LEN("<D:getcontenttype>"));
						buffer_append_string_buffer(b, ds->value);
						buffer_append_string_len(b, CONST_STR_LEN("</D:getcontenttype>"));
						found = 1;

						break;
					}
				}
			}
		} else if (0 == strcmp(prop_name, "creationdate")) {
			buffer_append_string_len(b, CONST_STR_LEN("<D:creationdate ns0:dt=\"dateTime.tz\">"));
			strftime(ctime_buf, sizeof(ctime_buf), "%Y-%m-%dT%H:%M:%SZ", gmtime(&(sce->st.st_ctime)));
			buffer_append_string(b, ctime_buf);
			buffer_append_string_len(b, CONST_STR_LEN("</D:creationdate>"));
			found = 1;
		} else if (0 == strcmp(prop_name, "getlastmodified")) {
			buffer_append_string_len(b,CONST_STR_LEN("<D:getlastmodified ns0:dt=\"dateTime.rfc1123\">"));
			strftime(mtime_buf, sizeof(mtime_buf), "%a, %d %b %Y %H:%M:%S GMT", gmtime(&(sce->st.st_mtime)));
			buffer_append_string(b, mtime_buf);
			buffer_append_string_len(b, CONST_STR_LEN("</D:getlastmodified>"));
			found = 1;
		} else if (0 == strcmp(prop_name, "getcontentlength")) {
			buffer_append_string_len(b,CONST_STR_LEN("<D:getcontentlength>"));
			buffer_append_off_t(b, sce->st.st_size);
			buffer_append_string_len(b, CONST_STR_LEN("</D:getcontentlength>"));
			found = 1;
		} else if (0 == strcmp(prop_name, "getcontentlanguage")) {
			buffer_append_string_len(b,CONST_STR_LEN("<D:getcontentlanguage>"));
			buffer_append_string_len(b, CONST_STR_LEN("en"));
			buffer_append_string_len(b, CONST_STR_LEN("</D:getcontentlanguage>"));
			found = 1;
		}
	}

	return found ? 0 : -1;
}

static int smbdav_get_property(server *srv, connection *con, plugin_data *p, physical *dst, char *prop_name, char *prop_ns, buffer *b) {
	if (0 == strcmp(prop_ns, "DAV:")) {
		/* a local 'live' property */
		return smbdav_get_live_property(srv, con, p, dst, prop_name, b);
	} else {
		int found = 0;
#ifdef USE_PROPPATCH
		sqlite3_stmt *stmt = p->conf.stmt_select_prop;

		if (stmt) {
			/* perhaps it is in sqlite3 */
			sqlite3_reset(stmt);

			/* bind the values to the insert */

			sqlite3_bind_text(stmt, 1,
					  dst->rel_path->ptr,
					  dst->rel_path->used - 1,
					  SQLITE_TRANSIENT);
			sqlite3_bind_text(stmt, 2,
					  prop_name,
					  strlen(prop_name),
					  SQLITE_TRANSIENT);
			sqlite3_bind_text(stmt, 3,
					  prop_ns,
					  strlen(prop_ns),
					  SQLITE_TRANSIENT);

			/* it is the PK */
			while (SQLITE_ROW == sqlite3_step(stmt)) {
				/* there is a row for us, we only expect a single col 'value' */
				smbdav_gen_prop_tag(srv, con, prop_name, prop_ns, (char *)sqlite3_column_text(stmt, 0), b);
				found = 1;
			}
		}
#endif
		return found ? 0 : -1;
	}

	/* not found */
	return -1;
}

typedef struct {
	char *ns;
	char *prop;
} smbdav_property;

smbdav_property live_properties[] = {
	{ "DAV:", "creationdate" },
	{ "DAV:", "displayname" },
	{ "DAV:", "getcontentlanguage" },
	{ "DAV:", "getcontentlength" },
	{ "DAV:", "getcontenttype" },
	{ "DAV:", "getetag" },
	{ "DAV:", "getlastmodified" },
	{ "DAV:", "resourcetype" },
	{ "DAV:", "lockdiscovery" },
	{ "DAV:", "source" },
	{ "DAV:", "supportedlock" },

	{ NULL, NULL }
};

typedef struct {
	smbdav_property **ptr;

	size_t used;
	size_t size;
} smbdav_properties;

static int smbdav_get_props(server *srv, connection *con, plugin_data *p, physical *dst, smbdav_properties *props, buffer *b_200, buffer *b_404) {
	size_t i;

	if (props) {
		for (i = 0; i < props->used; i++) {
			smbdav_property *prop;

			prop = props->ptr[i];

			if (0 != smbdav_get_property(srv, con, p, dst, prop->prop, prop->ns, b_200)) {				
				smbdav_gen_prop_tag(srv, con, prop->prop, prop->ns, NULL, b_404);
			}
		}
	} else {
		for (i = 0; live_properties[i].prop; i++) {
			/* a local 'live' property */
			smbdav_get_live_property(srv, con, p, dst, live_properties[i].prop, b_200);
		}
	}

	return 0;
}

#ifdef USE_PROPPATCH
static int smbdav_parse_chunkqueue(server *srv, connection *con, plugin_data *p, chunkqueue *cq, xmlDoc **ret_xml) {
	xmlParserCtxtPtr ctxt;
	xmlDoc *xml;
	int res;
	int err;

	chunk *c;

	UNUSED(con);

	/* read the chunks in to the XML document */
	ctxt = xmlCreatePushParserCtxt(NULL, NULL, NULL, 0, NULL);

	for (c = cq->first; cq->bytes_out != cq->bytes_in; c = cq->first) {
		size_t weWant = cq->bytes_out - cq->bytes_in;
		size_t weHave;

		switch(c->type) {
		case SMB_CHUNK:
			break;
		case FILE_CHUNK:
			weHave = c->file.length - c->offset;

			if (weHave > weWant) weHave = weWant;

			/* xml chunks are always memory, mmap() is our friend */
			if (c->file.mmap.start == MAP_FAILED) {
				if (-1 == c->file.fd &&  /* open the file if not already open */
				    -1 == (c->file.fd = open(c->file.name->ptr, O_RDONLY))) {
					log_error_write(srv, __FILE__, __LINE__, "ss", "open failed: ", strerror(errno));

					return -1;
				}

				if (MAP_FAILED == (c->file.mmap.start = mmap(0, c->file.length, PROT_READ, MAP_SHARED, c->file.fd, 0))) {
					log_error_write(srv, __FILE__, __LINE__, "ssbd", "mmap failed: ",
							strerror(errno), c->file.name,  c->file.fd);
					close(c->file.fd);
					c->file.fd = -1;

					return -1;
				}

				close(c->file.fd);
				c->file.fd = -1;

				c->file.mmap.length = c->file.length;

				/* chunk_reset() or chunk_free() will cleanup for us */
			}

			if (XML_ERR_OK != (err = xmlParseChunk(ctxt, c->file.mmap.start + c->offset, weHave, 0))) {
				log_error_write(srv, __FILE__, __LINE__, "sodd", "xmlParseChunk failed at:", cq->bytes_out, weHave, err);
			}

			c->offset += weHave;
			cq->bytes_out += weHave;

			break;
		case MEM_CHUNK:
			/* append to the buffer */
			weHave = c->mem->used - 1 - c->offset;

			if (weHave > weWant) weHave = weWant;

			if (p->conf.log_xml) {
				log_error_write(srv, __FILE__, __LINE__, "ss", "XML-request-body:", c->mem->ptr + c->offset);
			}

			if (XML_ERR_OK != (err = xmlParseChunk(ctxt, c->mem->ptr + c->offset, weHave, 0))) {
				log_error_write(srv, __FILE__, __LINE__, "sodd", "xmlParseChunk failed at:", cq->bytes_out, weHave, err);
			}

			c->offset += weHave;
			cq->bytes_out += weHave;

			break;
		case UNUSED_CHUNK:
			break;
		}
		chunkqueue_remove_finished_chunks(cq);
	}

	switch ((err = xmlParseChunk(ctxt, 0, 0, 1))) {
	case XML_ERR_DOCUMENT_END:
	case XML_ERR_OK:
		break;
	default:
		log_error_write(srv, __FILE__, __LINE__, "sd", "xmlParseChunk failed at final packet:", err);
		break;
	}

	xml = ctxt->myDoc;
	res = ctxt->wellFormed;
	xmlFreeParserCtxt(ctxt);

	if (res == 0) {
		xmlFreeDoc(xml);
	} else {
		*ret_xml = xml;
	}

	return res;
}
#endif

#ifdef USE_LOCKS
static int smbdav_lockdiscovery(server *srv, connection *con,
		buffer *locktoken, const char *lockscope, const char *locktype, int depth) {

	buffer *b;

	response_header_overwrite(srv, con, CONST_STR_LEN("Lock-Token"), CONST_BUF_LEN(locktoken));

	response_header_overwrite(srv, con,
		CONST_STR_LEN("Content-Type"),
		CONST_STR_LEN("text/xml; charset=\"utf-8\""));

	b = chunkqueue_get_append_buffer(con->write_queue);

	buffer_copy_string_len(b, CONST_STR_LEN("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:prop xmlns:D=\"DAV:\" xmlns:ns0=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n"));
	buffer_append_string_len(b,CONST_STR_LEN("<D:lockdiscovery>\n"));
	buffer_append_string_len(b,CONST_STR_LEN("<D:activelock>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:lockscope>"));
	buffer_append_string_len(b,CONST_STR_LEN("<D:"));
	buffer_append_string(b, lockscope);
	buffer_append_string_len(b, CONST_STR_LEN("/>"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:lockscope>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:locktype>"));
	buffer_append_string_len(b,CONST_STR_LEN("<D:"));
	buffer_append_string(b, locktype);
	buffer_append_string_len(b, CONST_STR_LEN("/>"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:locktype>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:depth>"));
	buffer_append_string(b, depth == 0 ? "0" : "infinity");
	buffer_append_string_len(b,CONST_STR_LEN("</D:depth>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:timeout>"));
	buffer_append_string_len(b, CONST_STR_LEN("Second-600"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:timeout>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:owner>"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:owner>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("<D:locktoken>"));
	buffer_append_string_len(b, CONST_STR_LEN("<D:href>"));
	buffer_append_string_buffer(b, locktoken);
	buffer_append_string_len(b, CONST_STR_LEN("</D:href>"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:locktoken>\n"));

	buffer_append_string_len(b,CONST_STR_LEN("</D:activelock>\n"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:lockdiscovery>\n"));
	buffer_append_string_len(b,CONST_STR_LEN("</D:prop>\n"));

	return 0;
}
#endif

/**
 * check if resource is having the right locks to access to resource
 *
 *
 *
 */
static int smbdav_has_lock(server *srv, connection *con, plugin_data *p, buffer *uri) {
	int has_lock = 1;

#ifdef USE_LOCKS
	data_string *ds;
	UNUSED(srv);

	/**
	 * This implementation is more fake than real
	 * we need a parser for the If: header to really handle the full scope
	 *
	 * X-Litmus: locks: 11 (owner_modify)
	 * If: <http://127.0.0.1:1025/dav/litmus/lockme> (<opaquelocktoken:2165478d-0611-49c4-be92-e790d68a38f1>)
	 * - a tagged check:
	 *   if http://127.0.0.1:1025/dav/litmus/lockme is locked with
	 *   opaquelocktoken:2165478d-0611-49c4-be92-e790d68a38f1, go on
	 *
	 * X-Litmus: locks: 16 (fail_cond_put)
	 * If: (<DAV:no-lock> ["-1622396671"])
	 * - untagged:
	 *   go on if the resource has the etag [...] and the lock
	 */
	if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "If"))) {
		/* Ooh, ooh. A if tag, now the fun begins.
		 *
		 * this can only work with a real parser
		 **/
	} else {
		/* we didn't provided a lock-token -> */
		/* if the resource is locked -> 423 */

		sqlite3_stmt *stmt = p->conf.stmt_read_lock_by_uri;

		sqlite3_reset(stmt);

		sqlite3_bind_text(stmt, 1,
			  CONST_BUF_LEN(uri),
			  SQLITE_TRANSIENT);

		while (SQLITE_ROW == sqlite3_step(stmt)) {
			has_lock = 0;
		}
	}
#else
	UNUSED(srv);
	UNUSED(con);
	UNUSED(p);
	UNUSED(uri);
#endif

	return has_lock;
}

int in_the_same_folder(buffer *src, buffer *dst) 
{
	char *sp;

	char *smem = (char *)malloc(src->used);
	memcpy(smem, src->ptr, src->used);
		
	char *dmem = (char *)malloc(dst->used);	
	memcpy(dmem, dst->ptr, dst->used);
		
	sp = strrchr(smem, '/');
	int slen = sp - smem;
	sp = strrchr(dmem, '/');
	int dlen = sp - dmem;

	smem[slen] = '\0';
	dmem[dlen] = '\0';
	
	int res = memcmp(smem, dmem, (slen>dlen) ? slen : dlen);		
		
	free(smem);
	free(dmem);

	return (res) ? 0 : 1;
}

static int smbdav_get_share_property(server *srv, connection *con, 
	plugin_data *p, 
	physical *dst, 
	char *prop_name, 
	buffer *b) 
{
	int found = 0;

	UNUSED(p);

	//if (HANDLER_ERROR != (smb_cache_get_entry(srv, con, p, dst->path, &sce))) 
	{
		char ctime_buf[] = "2005-08-18T07:27:16Z";
		char mtime_buf[] = "Thu, 18 Aug 2005 07:27:16 GMT";
		size_t k;

		if (0 == strcmp(prop_name, "resourcetype")) {
			buffer_append_string_len(b, CONST_STR_LEN("<D:resourcetype><D:collection/></D:resourcetype>"));
			found = 1;
		} else if (0 == strcmp(prop_name, "getcontenttype")) {
			buffer_append_string_len(b, CONST_STR_LEN("<D:getcontenttype>httpd/unix-directory</D:getcontenttype>"));
			found = 1;
#if 0			
		} else if (0 == strcmp(prop_name, "creationdate")) {
			buffer_append_string_len(b, CONST_STR_LEN("<D:creationdate ns0:dt=\"dateTime.tz\">"));
			strftime(ctime_buf, sizeof(ctime_buf), "%Y-%m-%dT%H:%M:%SZ", gmtime(&(sce->st.st_ctime)));
			buffer_append_string(b, ctime_buf);
			buffer_append_string_len(b, CONST_STR_LEN("</D:creationdate>"));
			found = 1;
		} else if (0 == strcmp(prop_name, "getlastmodified")) {
			buffer_append_string_len(b,CONST_STR_LEN("<D:getlastmodified ns0:dt=\"dateTime.rfc1123\">"));
			strftime(mtime_buf, sizeof(mtime_buf), "%a, %d %b %Y %H:%M:%S GMT", gmtime(&(sce->st.st_mtime)));
			buffer_append_string(b, mtime_buf);
			buffer_append_string_len(b, CONST_STR_LEN("</D:getlastmodified>"));
			found = 1;
		} else if (0 == strcmp(prop_name, "getcontentlength")) {
			buffer_append_string_len(b,CONST_STR_LEN("<D:getcontentlength>"));
			buffer_append_off_t(b, sce->st.st_size);
			buffer_append_string_len(b, CONST_STR_LEN("</D:getcontentlength>"));
			found = 1;
#endif			
		} else if (0 == strcmp(prop_name, "getcontentlanguage")) {
			buffer_append_string_len(b,CONST_STR_LEN("<D:getcontentlanguage>"));
			buffer_append_string_len(b, CONST_STR_LEN("en"));
			buffer_append_string_len(b, CONST_STR_LEN("</D:getcontentlanguage>"));
			found = 1;
		}
	}

	return found ? 0 : -1;
}

static int smbdav_get_share_props(server *srv, connection *con, 
	plugin_data *p, 
	physical *dst, 
	smbdav_properties *props, 
	buffer *b_200, 
	buffer *b_404) 
{
	size_t i;

	if (props) {
		for (i = 0; i < props->used; i++) {
			smbdav_property *prop;
			prop = props->ptr[i];

			if (0 != smbdav_get_share_property(srv, con, p, dst, prop->prop, b_200)) {
				smbdav_gen_prop_tag(srv, con, prop->prop, prop->ns, NULL, b_200);
			}
		}
	} else {
		for (i = 0; live_properties[i].prop; i++) {
			/* a local 'live' property */
			smbdav_get_share_property(srv, con, p, dst, live_properties[i].prop, b_200);
		}
	}
	return 0;
}

static void smbdav_propfind_prepare_response_bulk(server *srv, connection *con, plugin_data *p,
	buffer *b, physical *d, buffer *prop_200, buffer *prop_404)
{
	buffer_append_string_len(b,CONST_STR_LEN("<D:response>\n"));
	buffer_append_string_len(b,CONST_STR_LEN("<D:href>"));
	buffer_append_string_buffer(b, con->uri.scheme);
	buffer_append_string_len(b,CONST_STR_LEN("://"));
	buffer_append_string_buffer(b, con->uri.authority);
	buffer_append_string_encoded(b, CONST_BUF_LEN(d->rel_path), ENCODING_REL_URI);
	buffer_append_string_len(b,CONST_STR_LEN("</D:href>\n"));

	if (!buffer_is_empty(prop_200)) {
		buffer_append_string_len(b,CONST_STR_LEN("<D:propstat>\n"));
		buffer_append_string_len(b,CONST_STR_LEN("<D:prop>\n"));

		buffer_append_string_buffer(b, prop_200);

		buffer_append_string_len(b,CONST_STR_LEN("</D:prop>\n"));

		buffer_append_string_len(b,CONST_STR_LEN("<D:status>HTTP/1.1 200 OK</D:status>\n"));

		buffer_append_string_len(b,CONST_STR_LEN("</D:propstat>\n"));
	}
	if (!buffer_is_empty(prop_404)) {
		buffer_append_string_len(b,CONST_STR_LEN("<D:propstat>\n"));
		buffer_append_string_len(b,CONST_STR_LEN("<D:prop>\n"));

		buffer_append_string_buffer(b, prop_404);

		buffer_append_string_len(b,CONST_STR_LEN("</D:prop>\n"));

		buffer_append_string_len(b,CONST_STR_LEN("<D:status>HTTP/1.1 404 Not Found!!!</D:status>\n"));

		buffer_append_string_len(b,CONST_STR_LEN("</D:propstat>\n"));
	}

	buffer_append_string_len(b,CONST_STR_LEN("</D:response>\n"));

	return;						

}

void smbc_list_directory_header(server *srv, connection *con, plugin_data *p, buffer *out) 
{
	UNUSED(srv);

	//if (p->conf.auto_layout) 
	{
		buffer_append_string_len(out, CONST_STR_LEN(
			"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n"
			"<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\">\n"
			"<head>\n"
			"<title>Index of "
		));
		buffer_append_string_encoded(out, CONST_BUF_LEN(con->uri.path), ENCODING_MINIMAL_XML);
		buffer_append_string_len(out, CONST_STR_LEN("</title>\n"));
 
		//if (p->conf.external_css->used > 1) {
		//	buffer_append_string_len(out, CONST_STR_LEN("<link rel=\"stylesheet\" type=\"text/css\" href=\""));
		//	buffer_append_string_buffer(out, p->conf.external_css);
		//	buffer_append_string_len(out, CONST_STR_LEN("\" />\n"));
		//} else 
		{
			//- Jerry modify
			buffer_append_string_len(out, CONST_STR_LEN(
				"<script type='text/javascript' src='/smb/js/davclient.js/jsbase/exception.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/davclient.js/jsbase/string.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/davclient.js/jsbase/array.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/davclient.js/minisax.js/minisax.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/davclient.js/dommer/dommer.js'></script>\n" 
				"<script type='text/javascript' src='/smb/js/davclient.js/davclient.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/davclient.js/test_client.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/jquery-1.4.2.min.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/jquery.jplayer.min.js'></script>\n"
				"<script type='text/javascript' src='/smb/js/main.js'></script>\n"
				"<link rel='stylesheet' href='/smb/css/style.css' type='text/css'/>\n"				
				"<link rel='stylesheet' href='/smb/css/static-style.css' type='text/css'/>\n"
			));
				

			/*
			buffer_append_string_len(out, CONST_STR_LEN(
				"<style type=\"text/css\">\n"
				"a, a:active {text-decoration: none; color: blue;}\n"
				"a:visited {color: #48468F;}\n"
				"a:hover, a:focus {text-decoration: underline; color: red;}\n"
				"body {background-color: #F5F5F5;}\n"
				"h2 {margin-bottom: 12px;}\n"
				"table {margin-left: 12px;}\n"
				"th, td {"
				" font: 90% monospace;"
				" text-align: left;"
				"}\n"
				"th {"
				" font-weight: bold;"
				" padding-right: 14px;"
				" padding-bottom: 3px;"
				"}\n"
				"td {padding-right: 14px;}\n"
				"td.s, th.s {text-align: right;}\n"
				"div.list {"
				" background-color: white;"
				" border-top: 1px solid #646464;"
				" border-bottom: 1px solid #646464;"
				" padding-top: 10px;"
				" padding-bottom: 14px;"
				"}\n"
				"div.foot {"
				" font: 90% monospace;"
				" color: #787878;"
				" padding-top: 4px;"
				"}\n"
				"</style>\n"
			));
			*/
		}

		buffer_append_string_len(out, CONST_STR_LEN("</head>\n<body>\n"));
	}

	//- Jerry modify
	buffer_append_string_len(out, CONST_STR_LEN("<div id=\"mainRegion\" url='"));
	buffer_append_string_encoded(out, CONST_BUF_LEN(con->uri.path), ENCODING_MINIMAL_XML);
	buffer_append_string_len(out, CONST_STR_LEN("'>\n"));

	buffer_append_string_len(out, CONST_STR_LEN("<table id='infoRegion' width='100%' border='0' cellspacing='3' cellpadding='0'>"));
	buffer_append_string_len(out, CONST_STR_LEN("<tr>"));
	buffer_append_string_len(out, CONST_STR_LEN("<td align='left' width='16'>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='homeview'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("</td>"));
	buffer_append_string_len(out, CONST_STR_LEN("<td ><p align='left' width='250' > Index of "));
	buffer_append_string_encoded(out, CONST_BUF_LEN(con->uri.path), ENCODING_MINIMAL_XML);
	buffer_append_string_len(out, CONST_STR_LEN("</p></td>"));
	buffer_append_string_len(out, CONST_STR_LEN("<td align='right' width='16'>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='thumbview'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("</td>"));
	buffer_append_string_len(out, CONST_STR_LEN("<td align='right' width='16'>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='listview'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("</td>"));
	buffer_append_string_len(out, CONST_STR_LEN("</tr>"));
	buffer_append_string_len(out, CONST_STR_LEN("</table>"));

   	buffer_append_string_len(out, CONST_STR_LEN("</tbody></table>\n"));

}


void smbc_list_directory_footer(server *srv, connection *con, plugin_data *p, buffer *out) 
{
	UNUSED(srv);

	buffer_append_string_len(out, CONST_STR_LEN(
		"</td>\n"
		"</tr>\n"
		"</tbody>\n"
		"</table>\n"
		"</div>\n"
		"</body>\n"
		"</html>\n"
	));
}

int smbc_list_directory(server *srv, connection *con, plugin_data *p, buffer *dir) 
{
	//basic_handler_ctx *hctx = con->plugin_ctx[p->id];
	int dh;
	buffer *out;
	struct smbc_dirent *dent;
	struct stat st;
	char *path, *path_file;
	size_t i;
	int hide_dotfiles = 1; //p->conf.hide_dot_files;
	smbc_dirls_list_t dirs, files, *list;
	smbc_dirls_entry_t *tmp;
	char sizebuf[sizeof("999.9K")];
	char datebuf[sizeof("2005-Jan-01 22:23:24")];
	char tmpbuf[100];
	int isParentPath = 0;
	size_t k;
	const char *content_type;
	long name_max;
#ifdef HAVE_LOCALTIME_R
	struct tm tm;
#endif
	Cdbg(DBE, "enter smbc_list_directory..with qlfag=[%d], dir=[%s]", con->smb_info->qflag, dir->ptr);

	if(dir->ptr[dir->used-2] != '/') {
		buffer_append_string_len(dir, CONST_STR_LEN("/"));
	}
	if (dir->used == 0) return -1;

	i = dir->used - 1;

#ifdef HAVE_PATHCONF
	if (-1 == (name_max = pathconf(dir->ptr, _PC_NAME_MAX))) {
#ifdef NAME_MAX
		name_max = NAME_MAX;
#else
		name_max = 255; /* stupid default */
#endif
	}
#elif defined __WIN32
	name_max = FILENAME_MAX;
#else
	name_max = NAME_MAX;
#endif

	path = malloc(dir->used + name_max);
	assert(path);
	strcpy(path, dir->ptr);
	path_file = path + i;
	Cdbg(DBE, "path=[%s], path_file=[%s]", path, path_file);

	dirs.ent   = (smbc_dirls_entry_t**) malloc(sizeof(smbc_dirls_entry_t*) * DIRLIST_BLOB_SIZE);
	assert(dirs.ent);
	dirs.size  = DIRLIST_BLOB_SIZE;
	dirs.used  = 0;
	files.ent  = (smbc_dirls_entry_t**) malloc(sizeof(smbc_dirls_entry_t*) * DIRLIST_BLOB_SIZE);
	assert(files.ent);
	files.size = DIRLIST_BLOB_SIZE;
	files.used = 0;

	//- Jerry add 20110930 to query hosts from arpping list
	if(con->smb_info->qflag == SMB_HOST_QUERY) { 

#if 0	
		size_t j;
		smb_srv_info_t* c;
		
		for (c = smb_srv_info_list; c; c = c->next) {
			if(c->name->used == 0 || strcmp(c->name->ptr,"")==0)
				continue;

			j = strlen(c->name->ptr);
		
			if (j > (size_t)name_max) continue;
			memcpy(path_file, c->name->ptr, j + 1);
		
			list = &dirs;
			if (list->used == list->size) {
				list->size += DIRLIST_BLOB_SIZE;
				list->ent	= (smbc_dirls_entry_t**) realloc(list->ent, sizeof(smbc_dirls_entry_t*) * list->size);
				assert(list->ent);
			}
				
			tmp = (smbc_dirls_entry_t*) malloc(sizeof(smbc_dirls_entry_t) + 1 + j);
			tmp->mtime = st.st_mtime;
			tmp->size  = st.st_size;
			tmp->namelen = j;
		
			memcpy(DIRLIST_ENT_NAME(tmp), c->name->ptr, j + 1);
			list->ent[list->used++] = tmp;
		}
#else
		size_t j;
		int length, filesize;
		char* g_temp_file = "/tmp/arpping_list";
		FILE* fp = fopen(g_temp_file, "rb");
		if(fp!=NULL){
			
			fseek(fp,0,SEEK_END);
  			filesize = ftell(fp);
  			rewind(fp);
			
 	 		char* filebuf = (char *)malloc( filesize+1 );

			if( filebuf!=0 ){
				if( fread( filebuf, 1, filesize, fp ) == filesize ){
					//Cdbg(DBE, "filebuf=%s, filesize=%d, x=%d", filebuf, filesize, x);

					char * pch;				
					pch = strtok(filebuf,",");
					while( pch != NULL )
					{
						j = strlen(pch);
			
						if (j > (size_t)name_max || j <= 0 ) continue;
						memcpy(path_file, pch, j + 1);
			
						list = &dirs;
						if (list->used == list->size) {
							list->size += DIRLIST_BLOB_SIZE;
							list->ent	= (smbc_dirls_entry_t**) realloc(list->ent, sizeof(smbc_dirls_entry_t*) * list->size);
							assert(list->ent);
						}
							
						tmp = (smbc_dirls_entry_t*) malloc(sizeof(smbc_dirls_entry_t) + 1 + j);
						tmp->mtime = st.st_mtime;
						tmp->size  = st.st_size;
						tmp->namelen = j;
					
						memcpy(DIRLIST_ENT_NAME(tmp), pch, j + 1);
						list->ent[list->used++] = tmp;
				
						pch = strtok( NULL, "," );
					}
				}
			}
			
			free(filebuf);
			fclose(fp);
		}
#endif

		//if(list->used>0)
		goto output_result;
		
	}
	
	dh = smbc_wrapper_opendir(con, path);

	if(dh<0) {
		log_error_write(srv, __FILE__, __LINE__, "sbs",
			"smbc_opendir failed:", dir, strerror(errno));

		free(path);
		return -1;
	}

	while ((dent = smbc_wrapper_readdir(con, dh)) != NULL) {
		unsigned short exclude_match = 0;

		if (dent->name[0] == '.') {
			if (hide_dotfiles)
				continue;
			if (dent->name[1] == '\0')
				continue;
			if (dent->name[1] == '.' && dent->name[2] == '\0')
				continue;
		}
		i = strlen(dent->name);

		/* NOTE: the manual says, d_name is never more than NAME_MAX
		 *       so this should actually not be a buffer-overflow-risk
		 */
		if (i > (size_t)name_max) continue;

		switch(con->smb_info->qflag) {
		case SMB_HOST_QUERY: 
			{
#ifdef SCAN_MASTER_BROWSER

			int subdh;
			struct smbc_dirent *subdent;
			size_t j;
			char workgroup[100];
			sprintf(workgroup, "smb://%s/", dent->name);
			subdh = smbc_wrapper_opendir(con, workgroup);
			
			while ((subdent = smbc_wrapper_readdir(con, subdh)) != NULL) {
				j = strlen(subdent->name);
				if (j > (size_t)name_max) continue;
				memcpy(path_file, dent->name, j + 1);

				list = &dirs;
				if (list->used == list->size) {
					list->size += DIRLIST_BLOB_SIZE;
					list->ent   = (smbc_dirls_entry_t**) realloc(list->ent, sizeof(smbc_dirls_entry_t*) * list->size);
					assert(list->ent);
				}

				tmp = (smbc_dirls_entry_t*) malloc(sizeof(smbc_dirls_entry_t) + 1 + j);
				tmp->mtime = st.st_mtime;
				tmp->size  = st.st_size;
				tmp->namelen = j;

				Cdbg(DBE, "SMB_HOST_QUERY, GOT [%s]", dent->name);			

				memcpy(DIRLIST_ENT_NAME(tmp), subdent->name, j + 1);
				list->ent[list->used++] = tmp;
			}
			
			smbc_wrapper_closedir(con, subdh);
#endif
			}
			break;

		case SMB_SHARE_QUERY:

			//- Jerry add to ignore all share folder named [xxx$]
			if(strstr(dent->name, "$"))
				break;
			
			memcpy(path_file, dent->name, i + 1);

			list = &dirs;
			if (list->used == list->size) {
				list->size += DIRLIST_BLOB_SIZE;
				list->ent   = (smbc_dirls_entry_t**) realloc(list->ent, sizeof(smbc_dirls_entry_t*) * list->size);
				assert(list->ent);
			}

			tmp = (smbc_dirls_entry_t*) malloc(sizeof(smbc_dirls_entry_t) + 1 + i);
			tmp->mtime = st.st_mtime;
			tmp->size  = st.st_size;
			tmp->namelen = i;
				
			memcpy(DIRLIST_ENT_NAME(tmp), dent->name, i + 1);
			list->ent[list->used++] = tmp;
			break;
			
		case SMB_FILE_QUERY:
			memcpy(path_file, dent->name, i + 1);
			if (smbc_wrapper_stat(con, path, &st) != 0) {
				continue;
			}

			list = &files;
			if (S_ISDIR(st.st_mode))
				list = &dirs;

			if (list->used == list->size) {
				list->size += DIRLIST_BLOB_SIZE;
				list->ent   = (smbc_dirls_entry_t**) realloc(list->ent, sizeof(smbc_dirls_entry_t*) * list->size);
				assert(list->ent);
			}

			tmp = (smbc_dirls_entry_t*) malloc(sizeof(smbc_dirls_entry_t) + 1 + i);
			tmp->mtime = st.st_mtime;
			tmp->size  = st.st_size;
			tmp->namelen = i;
			//Cdbg(DBE, "SMB_FILE_QUERY, GOT [%s]", dent->name);			
			memcpy(DIRLIST_ENT_NAME(tmp), dent->name, i + 1);
			list->ent[list->used++] = tmp;
			break;
		}
		
	}
	
	smbc_wrapper_closedir(con,dh);


output_result:
	if (dirs.used) smbc_dirls_sort(dirs.ent, dirs.used);
	if (files.used) smbc_dirls_sort(files.ent, files.used);

	out = chunkqueue_get_append_buffer(con->write_queue);
	buffer_copy_string_len(out, CONST_STR_LEN("<?xml version=\"1.0\" encoding=\""));
	buffer_append_string_len(out, CONST_STR_LEN("utf-8"));
	buffer_append_string_len(out, CONST_STR_LEN("\"?>\n"));
	smbc_list_directory_header(srv, con, p, out);

	if(con->url_options->used && strstr(con->url_options->ptr, "a=1")){
		//- List View
		buffer_append_string_len(out, CONST_STR_LEN("<div id=\"div_table_content\">"));
		buffer_append_string_len(out, CONST_STR_LEN("<table id=\"ntb\" pagenum=\"0\" maxrows=\"13\" flock=\"\" field=\"time\" fval=\"\" order=\"DESC\" totalpages=\"84\" keyword=\"\" class=\"sortable\" width=\"100%\">"));

		buffer_append_string_len(out, CONST_STR_LEN("<thead class='category'>"));
		buffer_append_string_len(out, CONST_STR_LEN("<tr>"));
		buffer_append_string_len(out, CONST_STR_LEN("<td class='icon'>&nbsp;</td>"));
		buffer_append_string_len(out, CONST_STR_LEN("<th class='name'>Name</th>"));
		buffer_append_string_len(out, CONST_STR_LEN("<td class='size'>Size</td>"));
		buffer_append_string_len(out, CONST_STR_LEN("<td class='time'>Time</td>"));
		buffer_append_string_len(out, CONST_STR_LEN("<td class='type'>Type</td>"));
		buffer_append_string_len(out, CONST_STR_LEN("</tr>"));
		buffer_append_string_len(out, CONST_STR_LEN("</thead>"));
		
		isParentPath = (con->uri.path->used>2) ? 0 : 1;	
		if(isParentPath==0){		
			buffer_append_string_len(out, CONST_STR_LEN("<tbody>"));
			buffer_append_string_len(out, CONST_STR_LEN("<tr>"));
						
			buffer_append_string_len(out, CONST_STR_LEN("<td class='icon'><div class='sparentDiv'></div>"));
			buffer_append_string_len(out, CONST_STR_LEN("<th class='name'><a id='listtitle' uhref='../'>"));
			buffer_append_string_len(out, CONST_STR_LEN("..</a></th>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("<td class='size'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));

			buffer_append_string_len(out, CONST_STR_LEN("<td class='time'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("<td class='type'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));
				
			buffer_append_string_len(out, CONST_STR_LEN("</tr></tbody>"));
		}
		
		/* directories */
		for (i = 0; i < dirs.used; i++) {
			tmp = dirs.ent[i];
			
			if(con->smb_info->qflag == SMB_FILE_QUERY) {
#ifdef HAVE_LOCALTIME_R
				localtime_r(&(tmp->mtime), &tm);
				strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", &tm);
#else
				strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", localtime(&(tmp->mtime)));
#endif
			} else {
				memset(datebuf, 0, sizeof(datebuf));
				sprintf(datebuf, "--");
			}

			buffer_append_string_len(out, CONST_STR_LEN("<tbody>"));
			buffer_append_string_len(out, CONST_STR_LEN("<tr>"));
			
			if(isParentPath==1)
				buffer_append_string_len(out, CONST_STR_LEN("<td class='icon'><div class='scomputerDiv'></div></td>"));
			else	
				buffer_append_string_len(out, CONST_STR_LEN("<td class='icon'><div class='sfolderDiv'></div>"));
			buffer_append_string_len(out, CONST_STR_LEN("<th class='name'><a id='listtitle' uhref='"));

			buffer_append_string_len(out, con->uri.path->ptr, con->uri.path->used -1);
			if(con->uri.path->ptr[con->uri.path->used-2] != '/')
				buffer_append_string_len(out, CONST_STR_LEN("/"));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_REL_URI_PART);
			buffer_append_string_len(out, CONST_STR_LEN("/'>"));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);
			buffer_append_string_len(out, CONST_STR_LEN("</a></th>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("<td class='size'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));

			buffer_append_string_len(out, CONST_STR_LEN("<td class='time'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("<td class='type'>"));
			if(isParentPath==1)
				buffer_append_string_len(out, CONST_STR_LEN("Computer"));
			else
				buffer_append_string_len(out, CONST_STR_LEN("Folder"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));
				
			buffer_append_string_len(out, CONST_STR_LEN("</tr></tbody>"));
			
			free(tmp);
		}

		
		/* files */
		for (i = 0; i < files.used; i++) {
			tmp = files.ent[i];
		
			//content_type = NULL;
			//if (content_type == NULL) 
			{
				content_type = "application/octet-stream";
				for (k = 0; k < con->conf.mimetypes->used; k++) {
					data_string *ds = (data_string *)con->conf.mimetypes->data[k];
					size_t ct_len;
		
					if (ds->key->used == 0)
						continue;
		
					ct_len = ds->key->used - 1;
					if (tmp->namelen < ct_len)
						continue;
		
					if (0 == strncasecmp(DIRLIST_ENT_NAME(tmp) + tmp->namelen - ct_len, ds->key->ptr, ct_len)) {
						content_type = ds->value->ptr;
						break;
					}
				}
			}
		
#ifdef HAVE_LOCALTIME_R
			localtime_r(&(tmp->mtime), &tm);
			strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", &tm);
#else
			strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", localtime(&(tmp->mtime)));
#endif
			strcpy(sizebuf , "\0" );
			smbc_list_directory_sizefmt(sizebuf, tmp->size);
			
			buffer_append_string_len(out, CONST_STR_LEN("<tbody>"));
			buffer_append_string_len(out, CONST_STR_LEN("<tr>"));
					
			buffer_append_string_len(out, CONST_STR_LEN("<td class='icon'><div class='sfileDiv'></div></td>"));
			buffer_append_string_len(out, CONST_STR_LEN("<th class='name'><div style='position:absolute;'>"));
			buffer_append_string_len(out, CONST_STR_LEN("<a id='listtitle_file' href='"));

			buffer_append_string_len(out, con->uri.path->ptr, con->uri.path->used -1);
			if(con->uri.path->ptr[con->uri.path->used-2] != '/')
				buffer_append_string_len(out, CONST_STR_LEN("/"));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_REL_URI_PART);
			
			buffer_append_string_len(out, CONST_STR_LEN("'>"));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);
			buffer_append_string_len(out, CONST_STR_LEN("</a>"));
			buffer_append_string_len(out, CONST_STR_LEN("<span class='menu'></span>"));
			buffer_append_string_len(out, CONST_STR_LEN("</div></th>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("<td class='size'>"));
			buffer_append_string(out, sizebuf);
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));

			buffer_append_string_len(out, CONST_STR_LEN("<td class='time'>"));
			buffer_append_string_len(out, CONST_STR_LEN(datebuf));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("<td class='type'>"));
			buffer_append_string_len(out, CONST_STR_LEN("File"));
			buffer_append_string_len(out, CONST_STR_LEN("</td>"));
				
			buffer_append_string_len(out, CONST_STR_LEN("</tr></tbody>"));
			
			free(tmp);
		}

		free(files.ent);
		free(dirs.ent);
		free(path);
		
		buffer_append_string_len(out, CONST_STR_LEN("</table>"));
		buffer_append_string_len(out, CONST_STR_LEN("</div>"));
	}
	else{
		//- Thumb View
		
		isParentPath = (con->uri.path->used>2) ? 0 : 1;	
		if(isParentPath==0){		
			buffer_append_string_len(out, CONST_STR_LEN("<div class='albumDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='picDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='parentDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</div></div>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='albuminfo' style='font-size:80%'>"));
		    	buffer_append_string_len(out, CONST_STR_LEN("<a id='albumtitle' href=\"../\">"));
			buffer_append_string_len(out, CONST_STR_LEN("..</a></div></div>"));
		}

		/* directories */
		for (i = 0; i < dirs.used; i++) {
			tmp = dirs.ent[i];

			if(con->smb_info->qflag == SMB_FILE_QUERY) {
#ifdef HAVE_LOCALTIME_R
				localtime_r(&(tmp->mtime), &tm);
				strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", &tm);
#else
				strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", localtime(&(tmp->mtime)));
#endif
			} else {
				memset(datebuf, 0, sizeof(datebuf));
				sprintf(datebuf, "--");
			}

			//- Jerry modify
			buffer_append_string_len(out, CONST_STR_LEN("<div class='albumDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='picDiv'>"));
			if(isParentPath==1)
				buffer_append_string_len(out, CONST_STR_LEN("<div class='computerDiv'>"));
			else
				buffer_append_string_len(out, CONST_STR_LEN("<div class='folderDiv'>"));
			
			buffer_append_string_len(out, CONST_STR_LEN("</div></div>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='albuminfo' style='font-size:80%'>"));
	        	buffer_append_string_len(out, CONST_STR_LEN("<a id='albumtitle' href=\""));
			buffer_append_string_len(out, con->uri.path->ptr, con->uri.path->used -1);
			if(con->uri.path->ptr[con->uri.path->used-2] != '/')
				buffer_append_string_len(out, CONST_STR_LEN("/"));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_REL_URI_PART);
			buffer_append_string_len(out, CONST_STR_LEN("/\""));

			buffer_append_string_len(out, CONST_STR_LEN(" title=\""));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);
			buffer_append_string_len(out, CONST_STR_LEN("\">"));
		
			if(tmp->namelen>12){
				memset(tmpbuf, 0, sizeof(tmpbuf));
				buffer_append_string_len(out, DIRLIST_ENT_NAME(tmp), 12 );
				buffer_append_string_len(out, "...", 3 );
			}
			else
				buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);
			
			buffer_append_string_len(out, CONST_STR_LEN("</a></div></div>"));
			
			free(tmp);
		}

		/* files */
		for (i = 0; i < files.used; i++) {
			tmp = files.ent[i];

			//content_type = NULL;
			//if (content_type == NULL) 
			{
				content_type = "application/octet-stream";
				for (k = 0; k < con->conf.mimetypes->used; k++) {
					data_string *ds = (data_string *)con->conf.mimetypes->data[k];
					size_t ct_len;

					if (ds->key->used == 0)
						continue;

					ct_len = ds->key->used - 1;
					if (tmp->namelen < ct_len)
						continue;

					if (0 == strncasecmp(DIRLIST_ENT_NAME(tmp) + tmp->namelen - ct_len, ds->key->ptr, ct_len)) {
						content_type = ds->value->ptr;
						break;
					}
				}
			}

#ifdef HAVE_LOCALTIME_R
			localtime_r(&(tmp->mtime), &tm);
			strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", &tm);
#else
			strftime(datebuf, sizeof(datebuf), "%Y-%b-%d %H:%M:%S", localtime(&(tmp->mtime)));
#endif
			smbc_list_directory_sizefmt(sizebuf, tmp->size);

			//- Jerry modify
			buffer_append_string_len(out, CONST_STR_LEN("<div class='albumDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='picDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='fileDiv'>"));
			buffer_append_string_len(out, CONST_STR_LEN("</div></div>"));
			buffer_append_string_len(out, CONST_STR_LEN("<div class='albuminfo' style='font-size:80%'>"));
	        	buffer_append_string_len(out, CONST_STR_LEN("<a id='albumtitle' href=\""));
			buffer_append_string_len(out, con->uri.path->ptr, con->uri.path->used -1);
			if(con->uri.path->ptr[con->uri.path->used-2] != '/')
				buffer_append_string_len(out, CONST_STR_LEN("/"));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_REL_URI_PART);
			buffer_append_string_len(out, CONST_STR_LEN("\""));
			buffer_append_string_len(out, CONST_STR_LEN(" title=\""));
			buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);
			buffer_append_string_len(out, CONST_STR_LEN("\">"));

			if(tmp->namelen>12){

				buffer_append_string_len(out, DIRLIST_ENT_NAME(tmp), 12 );
				buffer_append_string_len(out, "...", 3 );
			}
			else
				buffer_append_string_encoded(out, DIRLIST_ENT_NAME(tmp), tmp->namelen, ENCODING_MINIMAL_XML);
			
			buffer_append_string_len(out, CONST_STR_LEN("</a></div></div>"));
					
			free(tmp);
		}

		free(files.ent);
		free(dirs.ent);
		free(path);
	}

	buffer_append_string_len(out, CONST_STR_LEN("<div id=\"funcRegion\" style=\"display:none; position:absolute;\">"));	
	buffer_append_string_len(out, CONST_STR_LEN("<div id='btnDelete'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='btnDownload'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='btnEmail'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='btnClose'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("<div id='btnRename'></div>"));
	buffer_append_string_len(out, CONST_STR_LEN("<input id='resourcefilename' type='text' style='166px'>"));
	buffer_append_string_len(out, CONST_STR_LEN("</div>"));
	
	smbc_list_directory_footer(srv, con, p, out);

	/* Insert possible charset to Content-Type */
	response_header_overwrite(srv, con, CONST_STR_LEN("Content-Type"), CONST_STR_LEN("text/html; charset=UTF-8"));

	con->file_finished = 1;

	return 0;
}

int smbc_list_host(server *srv, connection *con, 
	smbdav_properties *req_props,
	plugin_data *p, buffer *b, 
	buffer *prop_200,
	buffer *prop_404) 
{
	int dir;	
	int count = 0;
	smb_srv_info_t *c;
	physical d;	
	physical *dst = &con->url;
	
#ifdef SCAN_MASTER_BROWSER
	//- Count samba server
	for (c = smb_srv_info_list; c; c = c->next) {
		count++;
	}


	if(count<=0){
		if (NULL != (dir = smbc_wrapper_opendir(con, con->url.path->ptr))) {
			struct smbc_dirent *de;
			physical d;
			
			d.path = buffer_init();
			d.rel_path = buffer_init();

			while(NULL != (de = smbc_wrapper_readdir(con, dir))) {
				char workgroup[100];
				DIR *subdir;
				struct smbc_dirent *subde;
				sprintf(workgroup, "smb://%s/", de->name);

				if (NULL != (subdir = smbc_wrapper_opendir(con, workgroup))) {
					while(NULL != (subde = smbc_wrapper_readdir(con, subdir))) {

						buffer_copy_string_buffer(d.path, dst->path);
						BUFFER_APPEND_SLASH(d.path);

						buffer_copy_string_buffer(d.rel_path, dst->rel_path);
						BUFFER_APPEND_SLASH(d.rel_path);

						if (subde->name[0] == '.' && subde->name[1] == '\0') {
								/* don't append the . */
						} else {
							buffer_append_string(d.path, subde->name);
							buffer_append_string(d.rel_path, subde->name);
						}

						buffer_reset(prop_200);
						buffer_reset(prop_404);

						smbdav_get_share_props(srv, con, p, &d, req_props, prop_200, prop_404);
						smbdav_propfind_prepare_response_bulk(srv, con, p, b, &d, prop_200, prop_404);
					}
					smbc_wrapper_closedir(con, subdir);
				}
			}
			smbc_wrapper_closedir(con, dir);
			buffer_free(d.path);
			buffer_free(d.rel_path);
		}
		
		return 0;
	}
#endif

	d.path = buffer_init();
	d.rel_path = buffer_init();

#if 0
	for (c = smb_srv_info_list; c; c = c->next) {
		
		if(c->name->used == 0 || strcmp(c->name->ptr,"")==0)
			continue;

		buffer_copy_string_buffer(d.path, dst->path);
		BUFFER_APPEND_SLASH(d.path);
															
		buffer_copy_string_buffer(d.rel_path, dst->rel_path);
		BUFFER_APPEND_SLASH(d.rel_path);
	
		buffer_append_string_buffer(d.path, c->name);
		buffer_append_string_buffer(d.rel_path, c->name);

		//Cdbg(DBE, "dst->path=[%s]", dst->path->ptr);
		//Cdbg(DBE, "d.path=[%s], d.rel_path=[%s]", d.path->ptr, d.rel_path->ptr);
		
		buffer_reset(prop_200);
		buffer_reset(prop_404);
	
		smbdav_get_share_props(srv, con, p, &d, req_props, prop_200, prop_404);
		smbdav_propfind_prepare_response_bulk(srv, con, p, b, &d, prop_200, prop_404);

	}
#else
	size_t j;
	int length, filesize;
	char* g_temp_file = "/tmp/arpping_list";
	FILE* fp = fopen(g_temp_file, "rb");
	if(fp!=NULL){		
		fseek(fp,0,SEEK_END);
  		filesize = ftell(fp);
  		rewind(fp);
		
 		char* filebuf = (char *)malloc( filesize+1 );
		
		if( filebuf!=0 ){
			if( fread( filebuf, 1, filesize, fp ) == filesize ){
				//Cdbg(DBE, "filebuf=%s, filesize=%d", filebuf, filesize);

				char * pch;				
				pch = strtok(filebuf,",");
				while( pch != NULL )
				{						
					buffer_copy_string_buffer(d.path, dst->path);
					BUFFER_APPEND_SLASH(d.path);
																		
					buffer_copy_string_buffer(d.rel_path, dst->rel_path);
					BUFFER_APPEND_SLASH(d.rel_path);
				
					buffer_append_string(d.path, pch);
					buffer_append_string(d.rel_path, pch);

					//Cdbg(DBE, "dst->path=[%s]", dst->path->ptr);
					//Cdbg(DBE, "d.path=[%s], d.rel_path=[%s]", d.path->ptr, d.rel_path->ptr);
					
					buffer_reset(prop_200);
					buffer_reset(prop_404);
				
					smbdav_get_share_props(srv, con, p, &d, req_props, prop_200, prop_404);
					smbdav_propfind_prepare_response_bulk(srv, con, p, b, &d, prop_200, prop_404);
		
					pch = strtok( NULL, "," );
				}
			}
		}
			
		free(filebuf);
		fclose(fp);
	}
#endif

	buffer_free(d.path);
	buffer_free(d.rel_path);

}


URIHANDLER_FUNC(mod_smbdav_subrequest_handler) {
	plugin_data *p = p_d;
	buffer *b;
	DIR *dir;
	data_string *ds;
	int depth = -1;
	struct stat st;
	buffer *prop_200;
	buffer *prop_404;
	smbdav_properties *req_props;
	stat_cache_entry *sce = NULL;
	handler_t res = HANDLER_GO_ON;

#if 1
	//UNUSED(srv);
	Cdbg(DBE,"enter mod_smbdav_subrequest_handler..");
	Cdbg(DBE, "con->physical.path = %s", con->physical.path->ptr);
	Cdbg(DBE, "con->uri->path = %s", con->uri.path->ptr);
#endif

	if (!p->conf.enabled) {
		return HANDLER_GO_ON;
	}
	
	/* physical path is setup */
	if (con->physical.path->used == 0) {
		return HANDLER_GO_ON;
	}

	if (con->url.path->used == 0) {
		return HANDLER_GO_ON;
	}

	//start_arpping_process(srv->srvconf.arpping_interface->ptr);
	
	/* PROPFIND need them */
	if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "Depth"))) {
		depth = strtol(ds->value->ptr, NULL, 10);
	}
	
	Cdbg(DBE, "http_method=[%d][%s], depth=[%d], con->smb_info->qflag=[%d]", 
		con->request.http_method, get_http_method_name(con->request.http_method), 
		depth,
		con->smb_info->qflag );	
	Cdbg(DBE, "con->url->path = %s", con->url.path->ptr);
		
	switch (con->request.http_method) {
	case HTTP_METHOD_OPTIONS:
		/* we fake a little bit but it makes MS W2k happy and it let's us mount the volume */
		response_header_overwrite(srv, con, CONST_STR_LEN("DAV"), CONST_STR_LEN("1,2"));
		response_header_overwrite(srv, con, CONST_STR_LEN("MS-Author-Via"), CONST_STR_LEN("DAV"));
		return HANDLER_FINISHED;
	case HTTP_METHOD_HEAD:
	      /**
	        * a HEAD request has the same as a GET
	        * without the content
	        */
		con->http_status = 200;
		con->file_finished = 1;
		chunkqueue_reset(con->write_queue);
		con->response.transfer_encoding &= ~HTTP_TRANSFER_ENCODING_CHUNKED;
		return HANDLER_FINISHED;
	case HTTP_METHOD_GET:
		switch(con->smb_info->qflag) {
		case SMB_SHARE_QUERY:
		case SMB_HOST_QUERY:{
			smbc_list_directory(srv, con, p, con->url.path);
			con->http_status = 200;
			con->file_finished = 1;
			joblist_append(srv, con);
			return HANDLER_FINISHED;
		}	

		case SMB_FILE_QUERY:{

			if (-1 == smbc_wrapper_stat(con, con->url.path->ptr, &st)) {
				/* don't about it yet, rmdir will fail too */
				return HANDLER_FINISHED;
			} 
			else if (S_ISDIR(st.st_mode)) {
				smbc_list_directory(srv, con, p, con->url.path);
				con->http_status = 200;
				con->file_finished = 1;
				joblist_append(srv, con);
				return HANDLER_FINISHED;
			}
			else{
				Cdbg(DBE, "METHOD_GET->SMB_FILE_QUERY: HANDLER_GO_ON");
				return HANDLER_GO_ON;
			}
		}
		
		default: //leave the FILE_QUERY to system default behavior
			return HANDLER_GO_ON;
		}
	case HTTP_METHOD_PROPFIND:
		/* they want to know the properties of the directory */
		req_props = NULL;
		if(con->smb_info->qflag == SMB_FILE_QUERY) {
			/* is there a content-body ? */			
			
			if( smbc_wrapper_stat(con, con->url.path->ptr, &st) < 0 ) {
				
				if(errno == EACCES) {
					smbc_wrapper_response_401(srv, con);
				} else {				
					//if (errno == ENOENT) 
					con->http_status = 404;
					Cdbg(DBE, "con->http_status = 404");
				}
				return HANDLER_FINISHED;
			}
		}

#ifdef USE_PROPPATCH
		/* any special requests or just allprop ? */
		if (con->request.content_length) {
			xmlDocPtr xml;
			if (1 == smbdav_parse_chunkqueue(srv, con, p, con->request_content_queue, &xml)) {

				xmlNode *rootnode = xmlDocGetRootElement(xml);

				assert(rootnode);

				if (0 == xmlStrcmp(rootnode->name, BAD_CAST "propfind")) {
					xmlNode *cmd;

					req_props = calloc(1, sizeof(*req_props));

					for (cmd = rootnode->children; cmd; cmd = cmd->next) {

						if (0 == xmlStrcmp(cmd->name, BAD_CAST "prop")) {
							/* get prop by name */
							xmlNode *prop;

							for (prop = cmd->children; prop; prop = prop->next) {
								if (prop->type == XML_TEXT_NODE) continue; /* ignore WS */

								if (prop->ns &&
								    (0 == xmlStrcmp(prop->ns->href, BAD_CAST "")) &&
								    (0 != xmlStrcmp(prop->ns->prefix, BAD_CAST ""))) {
									size_t i;
									log_error_write(srv, __FILE__, __LINE__, "ss",
											"no name space for:",
											prop->name);

									xmlFreeDoc(xml);

									for (i = 0; i < req_props->used; i++) {
										free(req_props->ptr[i]->ns);
										free(req_props->ptr[i]->prop);
										free(req_props->ptr[i]);
									}
									free(req_props->ptr);
									free(req_props);

									con->http_status = 400;
									return HANDLER_FINISHED;
								}

								/* add property to requested list */
								if (req_props->size == 0) {
									req_props->size = 16;
									req_props->ptr = malloc(sizeof(*(req_props->ptr)) * req_props->size);
								} else if (req_props->used == req_props->size) {
									req_props->size += 16;
									req_props->ptr = realloc(req_props->ptr, sizeof(*(req_props->ptr)) * req_props->size);
								}

								req_props->ptr[req_props->used] = malloc(sizeof(smbdav_property));
								req_props->ptr[req_props->used]->ns = (char *)xmlStrdup(prop->ns ? prop->ns->href : (xmlChar *)"");
								req_props->ptr[req_props->used]->prop = (char *)xmlStrdup(prop->name);
								req_props->used++;
							}
						} else if (0 == xmlStrcmp(cmd->name, BAD_CAST "propname")) {
							sqlite3_stmt *stmt = p->conf.stmt_select_propnames;

							if (stmt) {
								/* get all property names (EMPTY) */
								sqlite3_reset(stmt);
								/* bind the values to the insert */

								sqlite3_bind_text(stmt, 1,
										  con->uri.path->ptr,
										  con->uri.path->used - 1,
										  SQLITE_TRANSIENT);

								if (SQLITE_DONE != sqlite3_step(stmt)) {
								}
							}
						} else if (0 == xmlStrcmp(cmd->name, BAD_CAST "allprop")) {
							/* get all properties (EMPTY) */
						}
					}
				}

				xmlFreeDoc(xml);
			} else {
				con->http_status = 400;
				return HANDLER_FINISHED;
			}
		}
#endif

		con->http_status = 207;

		response_header_overwrite(srv, con, CONST_STR_LEN("Content-Type"), CONST_STR_LEN("text/xml; charset=\"utf-8\""));

		b = chunkqueue_get_append_buffer(con->write_queue);

		buffer_copy_string_len(b, CONST_STR_LEN("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"));

		buffer_append_string_len(b,CONST_STR_LEN("<D:multistatus xmlns:D=\"DAV:\" xmlns:ns0=\"urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/\">\n"));
		
		/* allprop */

		prop_200 = buffer_init();
		prop_404 = buffer_init();
		
		switch(depth) {
		case 0:			
			/* Depth: 0 */
			switch(con->smb_info->qflag) {			
			case SMB_FILE_QUERY:
				smbdav_get_props(srv, con, p, &con->url, req_props, prop_200, prop_404);
				break;
			case SMB_SHARE_QUERY:
			case SMB_HOST_QUERY:
				smbdav_get_share_props(srv, con, p, &con->url, req_props, prop_200, prop_404);
				break;
			}
			smbdav_propfind_prepare_response_bulk(srv, con, p, b, &(con->physical), prop_200, prop_404);
			
			break;
		case 1:
			switch(con->smb_info->qflag) {
			#if 0	
			case SMB_FILE_QUERY:
			{
				if (NULL != (dir = smbc_wrapper_opendir(con, con->url.path->ptr))) {
					struct smbc_dirent *de;
					physical d, t;
					//physical *dst = &(con->physical);
					physical *dst = &con->url;					
					d.path = buffer_init();
					d.rel_path = buffer_init();

					t.path = buffer_init();
					t.rel_path = buffer_init();

					while(NULL != (de = smbc_wrapper_readdir(con, dir))) {
						if(!strcmp(de->name, "..")||
							strstr(de->name, "$") ) {
							//fprintf(stderr,"skip ########[%s]\n", de->name);
							continue;
						}
						
						buffer_copy_string_buffer(d.path, dst->path);
						BUFFER_APPEND_SLASH(d.path);
						buffer_copy_string_buffer(d.rel_path, dst->rel_path);
						BUFFER_APPEND_SLASH(d.rel_path);

						buffer_copy_string_buffer(t.path, con->physical.path);
						BUFFER_APPEND_SLASH(t.path);
						buffer_copy_string_buffer(t.rel_path, con->physical.rel_path);
						BUFFER_APPEND_SLASH(t.rel_path);

						if ( (de->name[0] == '.' && de->name[1] == '\0')){
							/* don't append the . */
						} else {
							buffer_append_string(d.path, de->name);
							buffer_append_string(d.rel_path, de->name);

							buffer_append_string(t.path, de->name);
							buffer_append_string(t.rel_path, de->name);
						}

						buffer_reset(prop_200);
						buffer_reset(prop_404);
						if(con->smb_info->qflag == SMB_FILE_QUERY)
							smbdav_get_props(srv, con, p, &d, req_props, prop_200, prop_404);
						else
							smbdav_get_share_props(srv, con, p, &d, req_props, prop_200, prop_404);

						smbdav_propfind_prepare_response_bulk(srv, con, p, b, &t, prop_200, prop_404);
					}
					smbc_wrapper_closedir(con, dir);
					buffer_free(d.path);
					buffer_free(d.rel_path);
					buffer_free(t.path);
					buffer_free(t.rel_path);
				}
				break;
			}
			#endif
			case SMB_FILE_QUERY: 
			{
				if (NULL != (dir = smbc_wrapper_opendir(con, con->url.path->ptr))) {
					struct smbc_dirent *de;
					physical d;
					//physical *dst = &(con->physical);
					physical *dst = &(con->url);

					d.path = buffer_init();
					d.rel_path = buffer_init();

					while(NULL != (de = smbc_wrapper_readdir(con, dir))) {
						if( (de->name[0] == '.' && de->name[1] == '.' && de->name[2] == '\0') ||
							(de->name[0] == '.') ){
							continue;
							/* ignore the parent dir */
						}

						buffer_copy_string_buffer(d.path, dst->path);
						BUFFER_APPEND_SLASH(d.path);

						buffer_copy_string_buffer(d.rel_path, dst->rel_path);
						BUFFER_APPEND_SLASH(d.rel_path);

						if (de->name[0] == '.' && de->name[1] == '\0') {
							/* don't append the . */
						} else {
							buffer_append_string(d.path, de->name);
							buffer_append_string(d.rel_path, de->name);
						}

						buffer_reset(prop_200);
						buffer_reset(prop_404);

						//Cdbg(DBE,"SMB_FILE_QUERY: d.path %s", d.path->ptr);
						//Cdbg(DBE,"SMB_FILE_QUERY: con->url.path->ptr %s", con->url.path->ptr);
						smbdav_get_props(srv, con, p, &d, req_props, prop_200, prop_404);
						smbdav_propfind_prepare_response_bulk(srv, con, p, b, &d, prop_200, prop_404);
					}
					smbc_wrapper_closedir(con,dir);
					buffer_free(d.path);
					buffer_free(d.rel_path);
				}
				break;
			}
			
			case SMB_SHARE_QUERY: 
			{
				if (NULL != (dir = smbc_wrapper_opensharedir(con, con->url.path->ptr))) {
					struct smbc_dirent *de;
					physical d;
					physical *dst = &(con->physical);

					d.path = buffer_init();
					d.rel_path = buffer_init();

					while(NULL != (de = smbc_wrapper_readdir(con, dir))) {
						if( (de->name[0] == '.' && de->name[1] == '.' && de->name[2] == '\0')/* ||
							( strstr(de->name, "$") ) */ ){
							continue;
							/* ignore the parent dir */
						}

						buffer_copy_string_buffer(d.path, dst->path);
						BUFFER_APPEND_SLASH(d.path);

						buffer_copy_string_buffer(d.rel_path, dst->rel_path);
						BUFFER_APPEND_SLASH(d.rel_path);

						if( (de->name[0] == '.' && de->name[1] == '\0')/* ||
							( strstr(de->name, "$") && strcmp(de->name, "IPC$")!=0 ) */ ){
							//- don't append the .
							//continue;
						} else {
							buffer_append_string(d.path, de->name);
							buffer_append_string(d.rel_path, de->name);
						}

						Cdbg(DBE,"SMB_SHARE_QUERY: de->name %s, d.path %s", de->name, d.path->ptr);
						
						buffer_reset(prop_200);
						buffer_reset(prop_404);

						smbdav_get_share_props(srv, con, p, &d, req_props, prop_200, prop_404);
						smbdav_propfind_prepare_response_bulk(srv, con, p, b, &d, prop_200, prop_404);
					}
					
					smbc_wrapper_closedir(con, dir);
					buffer_free(d.path);
					buffer_free(d.rel_path);
				}

				break;
			}
			
			default:
			case SMB_HOST_QUERY:	
			{
				smbc_list_host(srv, con, req_props, p, b, prop_200, prop_404);				
				break;
			}
			
			}
			break;
		default:
			break;
		}
		
		if (req_props) {
			size_t i;
			for (i = 0; i < req_props->used; i++) {
				free(req_props->ptr[i]->ns);
				free(req_props->ptr[i]->prop);
				free(req_props->ptr[i]);
			}
			free(req_props->ptr);
			free(req_props);
		}

		buffer_free(prop_200);
		buffer_free(prop_404);

		buffer_append_string_len(b,CONST_STR_LEN("</D:multistatus>\n"));

		if (p->conf.log_xml) {
			log_error_write(srv, __FILE__, __LINE__, "sb", "XML-response-body:", b);
		}
		con->file_finished = 1;
		return HANDLER_FINISHED;
		
	case HTTP_METHOD_MKCOL:
		if (p->conf.is_readonly) {
			con->http_status = 403;
			return HANDLER_FINISHED;
		}

		if (con->request.content_length != 0) {
			/* we don't support MKCOL with a body */
			con->http_status = 415;

			return HANDLER_FINISHED;
		}
		
		/* let's create the directory */
		if (-1 == smbc_wrapper_mkdir(con, con->url.path->ptr, WEBDAV_DIR_MODE)) {
			switch(errno) {
			case EPERM:
				con->http_status = 403;
				break;
			case ENOENT:
			case ENOTDIR:
				con->http_status = 409;
				break;
			case EEXIST:
			default:
				con->http_status = 405; /* not allowed */
				break;
			}
		} else {
			con->http_status = 201;
			con->file_finished = 1;
		}
		
		return HANDLER_FINISHED;

		
	case HTTP_METHOD_DELETE:
		if (p->conf.is_readonly) {
			con->http_status = 403;
			return HANDLER_FINISHED;
		}

		/* does the client have a lock for this connection ? */
		if (!smbdav_has_lock(srv, con, p, con->uri.path)) {
			con->http_status = 423;
			return HANDLER_FINISHED;
		}
					
		/* stat and unlink afterwards */		
		if (-1 == smbc_wrapper_stat(con, con->url.path->ptr, &st)) {			
			/* don't about it yet, unlink will fail too */
			switch(errno) {
			case ENOENT:
				 con->http_status = 404;
				 break;
			default:
				 con->http_status = 403;
				 break;
			}
		}
		else if (S_ISDIR(st.st_mode)) {				
			buffer *multi_status_resp = buffer_init();			
			if (smbdav_delete_dir(srv, con, p, &(con->url), multi_status_resp)) {
				// we got an error somewhere in between, build a 207 
				response_header_overwrite(srv, con, CONST_STR_LEN("Content-Type"), CONST_STR_LEN("text/xml; charset=\"utf-8\""));

				b = chunkqueue_get_append_buffer(con->write_queue);

				buffer_copy_string_len(b, CONST_STR_LEN("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"));

				buffer_append_string_len(b,CONST_STR_LEN("<D:multistatus xmlns:D=\"DAV:\">\n"));

				buffer_append_string_buffer(b, multi_status_resp);

				buffer_append_string_len(b,CONST_STR_LEN("</D:multistatus>\n"));

				if (p->conf.log_xml) {
					log_error_write(srv, __FILE__, __LINE__, "sb", "XML-response-body:", b);
				}

				con->http_status = 207;
				con->file_finished = 1;
			} 
			else {				
				// everything went fine, remove the directory
				if (-1 == smbc_wrapper_rmdir(con, con->url.path->ptr)) {
					switch(errno) {
					case ENOENT:
						con->http_status = 404;
						break;
					default:
						con->http_status = 501;
						break;
					}
				} else {
					con->http_status = 204;
				}
			}

			buffer_free(multi_status_resp);
		}
		else if (-1 == smbc_wrapper_unlink(con, con->url.path->ptr)) {
			switch(errno) {
			case EPERM:
				con->http_status = 403;
				break;
			case ENOENT:
				con->http_status = 404;
				break;
			default:
				con->http_status = 501;
				break;
			}
		} 
		else {
			con->http_status = 204;
		}
		return HANDLER_FINISHED;
		
	case HTTP_METHOD_PUT: {
		Cdbg(1,"HTTP_METHOD_PUT:");
		int fd;
		chunkqueue *cq = con->request_content_queue;
		chunk *c;
		data_string *ds_range;

		if (p->conf.is_readonly) {
			con->http_status = 403;
			return HANDLER_FINISHED;
		}

		/* is a exclusive lock set on the source */
		if (!smbdav_has_lock(srv, con, p, con->uri.path)) {
			con->http_status = 423;
			return HANDLER_FINISHED;
		}


		assert(chunkqueue_length(cq) == (off_t)con->request.content_length);
		Cdbg(1,"chunkqueue len=%d",con->request.content_length);

		/* RFC2616 Section 9.6 PUT requires us to send 501 on all Content-* we don't support
		 * - most important Content-Range
		 *
		 *
		 * Example: Content-Range: bytes 100-1037/1038 */

		if (NULL != (ds_range = (data_string *)array_get_element(con->request.headers, "Content-Range"))) {
			const char *num = ds_range->value->ptr;
			off_t offset;
			char *err = NULL;
			Cdbg(1,"Content-Range =%s",num);

			if (0 != strncmp(num, "bytes ", 6)) {
				con->http_status = 501; /* not implemented */

				return HANDLER_FINISHED;
			}

			/* we only support <num>- ... */

			num += 6;

			/* skip WS */
			while (*num == ' ' || *num == '\t') num++;

			if (*num == '\0') {
				con->http_status = 501; /* not implemented */

				return HANDLER_FINISHED;
			}

			offset = strtoll(num, &err, 10);

			if (*err != '-' || offset < 0) {
				con->http_status = 501; /* not implemented */

				return HANDLER_FINISHED;
			}

//			if (-1 == (fd = open(con->physical.path->ptr, O_WRONLY, WEBDAV_FILE_MODE))) {
			if (0> (fd = smbc_wrapper_open(con,con->url.path->ptr ,O_WRONLY| O_APPEND, 0) )) {
				switch (errno) {
				case ENOENT:
					con->http_status = 404; /* not found */
					break;
				default:
					con->http_status = 403; /* not found */
					break;
				}
				assert(0);
				return HANDLER_FINISHED;
			}

		//	if (-1 == lseek(fd, offset, SEEK_SET)) {
			if (-1 == smbc_wrapper_lseek(con, fd, offset, SEEK_SET)) {
				con->http_status = 501; /* not implemented */

//				close(fd);
				smbc_wrapper_close(con,fd);

				return HANDLER_FINISHED;
			}
			con->http_status = 200; /* modified */
		} else {
		   Cdbg(1,"ds range= NUL, url =%s",con->url.path->ptr);
			/* take what we have in the request-body and write it to a file */

			/* if the file doesn't exist, create it */
		//	if (-1 == (fd = open(con->physical.path->ptr, O_WRONLY|O_TRUNC, WEBDAV_FILE_MODE))) {
		   Cdbg(1,"ready to smbc open");
			fd = smbc_wrapper_open(con, con->url.path->ptr, O_WRONLY, /*WEBDAV_FILE_MODE*/0);
			if (fd<0 || (void*)fd==NULL ) {
			   Cdbg(1,"open failed errno=%d",errno);
				if (errno == ENOENT){
			//	    -1 == (fd = open(con->physical.path->ptr, O_WRONLY|O_CREAT|O_TRUNC|O_EXCL, WEBDAV_FILE_MODE))) {
					fd = smbc_wrapper_create(con, con->url.path->ptr,  FILE_READ_DATA | FILE_WRITE_DATA,0);
					if(fd <0 || (void*)fd==NULL ){
														
						/* we can't open the file */
						con->http_status = 403;
						Cdbg(1,"we can't open the file 403");
						assert(0);
						return HANDLER_FINISHED;
				   }
				} else {
					con->http_status = 201; /* created */
				}
			} else {
//				con->http_status = 200; /* modified */
				con->http_status = 201;
			}
		}

		con->file_finished = 1;
		Cdbg(1,"file finished=%d cq=%p",con->file_finished,cq);

		for (c = cq->first; c; c = cq->first) {
			int r = 0;

			/* copy all chunks */
			switch(c->type) {
			case SMB_CHUNK:
				Cdbg(1,"SMB_CHUNK:");
/*
				if ((r = write(fd, c->file.mmap.start + c->offset, c->file.length - c->offset)) < 0) {
					switch(errno) {
					case ENOSPC:
						con->http_status = 507;

						break;
					default:
						con->http_status = 403;
						break;
					}
				}
*/			
#if 0
				size_t seekpos=0;	
				Cdbg(1,"fd =%d",fd);
				if ( 0> (seekpos= smbc_wrapper_lseek(con, fd, 0, SEEK_END))) {
					Cdbg(1,"r=%d",r);
					con->http_status = 501;

	//				close(fd);
					if(fd>0) smbc_wrapper_close(con,fd);

					return HANDLER_FINISHED;
				}
				Cdbg(1,"seekpos=%d",seekpos);
				r= seekpos;
#endif
	//			r = con->request.content_length;
				r=0;
				c->offset = con->request.content_length;
				cq->bytes_out = con->request.content_length;
				break;

			case FILE_CHUNK:
				Cdbg(1,"FILE_CHUNK");

				if (c->file.mmap.start == MAP_FAILED) {
					if (-1 == c->file.fd &&  /* open the file if not already open */
					    -1 == (c->file.fd = open(c->file.name->ptr, O_RDONLY))) {
						log_error_write(srv, __FILE__, __LINE__, "ss", "open failed: ", strerror(errno));

						return HANDLER_ERROR;
					}

					if (MAP_FAILED == (c->file.mmap.start = mmap(0, c->file.length, PROT_READ, MAP_SHARED, c->file.fd, 0))) {
						log_error_write(srv, __FILE__, __LINE__, "ssbd", "mmap failed: ",
								strerror(errno), c->file.name,  c->file.fd);
						close(c->file.fd);
						c->file.fd = -1;

						return HANDLER_ERROR;
					}

					c->file.mmap.length = c->file.length;

					close(c->file.fd);
					c->file.fd = -1;

					/* chunk_reset() or chunk_free() will cleanup for us */
				}

				if ((r = write(fd, c->file.mmap.start + c->offset, c->file.length - c->offset)) < 0) {
					switch(errno) {
					case ENOSPC:
						con->http_status = 507;

						break;
					default:
						con->http_status = 403;
						break;
					}
				}
				break;
			case MEM_CHUNK:
				Cdbg(1,"MEM_CHUNK:");
				Cdbg(1,"fd =%p, mem=%p , content=%s",fd, c->mem->ptr + c->offset, c->mem->ptr + c->offset);
				
				if((r=  smbc_wrapper_write(con, fd, c->mem->ptr + c->offset,c->mem->used - c->offset - 1, 0))<0 ){
			//	if ((r = write(fd, c->mem->ptr + c->offset, c->mem->used - c->offset - 1)) < 0) {
					switch(errno) {
					case ENOSPC:
						con->http_status = 507;

						break;
					default:
						con->http_status = 403;
						break;
					}
				}
				break;
			case UNUSED_CHUNK:
				Cdbg(1,"UNUSED CHUNK");
				break;
			}

			   Cdbg(1,"r =%d", r);
			   Cdbg(1," c->offset= %lli", c->offset);
			   Cdbg(1," c->bytes_out = %lli", cq->bytes_out);
			if (r > 0) {
				c->offset += r;
				cq->bytes_out += r;
			} else {
			   Cdbg(1,"r <0");
				break;
			}
			   Cdbg(1," c->offset= %lli", c->offset);
			   Cdbg(1," c->bytes_out = %lli", cq->bytes_out);
			chunkqueue_remove_finished_chunks(cq);
		}
//		close(fd);
		Cdbg(1,"close smb file https =%d",con->http_status);
		if(fd>0) smbc_wrapper_close(con, fd);
		Cdbg(1,"METHOD_PUT ends");

		//assert(0);
		return HANDLER_FINISHED;
	}
	case HTTP_METHOD_MOVE:
	case HTTP_METHOD_COPY: {
		buffer *destination = NULL;
		char *sep, *sep2, *start;
		int overwrite = 1;

		if (p->conf.is_readonly) {
			con->http_status = 403;
			return HANDLER_FINISHED;
		}

		/* is a exclusive lock set on the source */
		if (con->request.http_method == HTTP_METHOD_MOVE) {
			if (!smbdav_has_lock(srv, con, p, con->uri.path)) {
				con->http_status = 423;
				return HANDLER_FINISHED;
			}
		}

		if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "Destination"))) {
			destination = ds->value;
		} else {
			con->http_status = 400;
			return HANDLER_FINISHED;
		}

		if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "Overwrite"))) {
			if (ds->value->used != 2 ||
			    (ds->value->ptr[0] != 'F' &&
			     ds->value->ptr[0] != 'T') )  {
				con->http_status = 400;
				return HANDLER_FINISHED;
			}
			
			overwrite = (ds->value->ptr[0] == 'F' ? 0 : 1);
		}
		/* let's parse the Destination
		 *
		 * http://127.0.0.1:1025/dav/litmus/copydest
		 *
		 * - host has to be the same as the Host: header we got
		 * - we have to stay inside the document root
		 * - the query string is thrown away
		 *  */

		buffer_reset(p->uri.scheme);
		buffer_reset(p->uri.path_raw);
		buffer_reset(p->uri.authority);

		start = destination->ptr;

		if (NULL == (sep = strstr(start, "://"))) {
			con->http_status = 400;
			return HANDLER_FINISHED;
		}
		buffer_copy_string_len(p->uri.scheme, start, sep - start);

		start = sep + 3;

		if (NULL == (sep = strchr(start, '/'))) {
			con->http_status = 400;
			return HANDLER_FINISHED;
		}
		if (NULL != (sep2 = memchr(start, '@', sep - start))) {
			/* skip login information */
			start = sep2 + 1;
		}
		buffer_copy_string_len(p->uri.authority, start, sep - start);

		start = sep + 1;

		if (NULL == (sep = strchr(start, '?'))) {
			/* no query string, good */
			buffer_copy_string(p->uri.path_raw, start);
		} else {
			buffer_copy_string_len(p->uri.path_raw, start, sep - start);
		}

		if (!buffer_is_equal(p->uri.authority, con->uri.authority)) {
			/* not the same host */
			con->http_status = 502;
			return HANDLER_FINISHED;
		}

		buffer_copy_string_buffer(p->tmp_buf, p->uri.path_raw);
		buffer_urldecode_path(p->tmp_buf);
		buffer_path_simplify(p->uri.path, p->tmp_buf);

		/* we now have a URI which is clean. transform it into a physical path */
		buffer_copy_string_buffer(p->physical.doc_root, con->physical.doc_root);
		buffer_copy_string_buffer(p->physical.rel_path, p->uri.path);

		if (con->conf.force_lowercase_filenames) {
			buffer_to_lower(p->physical.rel_path);
		}
		
		buffer_copy_string_buffer(p->physical.path, p->physical.doc_root);
		BUFFER_APPEND_SLASH(p->physical.path);
		buffer_copy_string_buffer(p->physical.basedir, p->physical.path);

		/* don't add a second / */
		if (p->physical.rel_path->ptr[0] == '/') {
			//- Jerry add
			buffer_append_string(p->physical.path, con->smb_info->username->ptr);
			buffer_append_string(p->physical.path,":");
			buffer_append_string(p->physical.path, con->smb_info->password->ptr);
			buffer_append_string(p->physical.path,"@");
			
			buffer_append_string_len(p->physical.path, 
				                     p->physical.rel_path->ptr + 1, 
				                     p->physical.rel_path->used - 2);
			
		} else {
			buffer_append_string_buffer(p->physical.path, p->physical.rel_path);			
		}
		
		
		/* let's see if the source is a directory
		 * if yes, we fail with 501 */
	
		if (-1 == smbc_wrapper_stat(con, con->url.path->ptr, &st)) {
			/* don't about it yet, unlink will fail too */
			switch(errno) {
			case ENOENT:
				 con->http_status = 404;
				 break;
			default:
				 con->http_status = 403;
				 break;
			}
		}
		else if (S_ISDIR(st.st_mode)) {
			
			int r;
			/* src is a directory */
			r = smbc_wrapper_stat(con, p->physical.path->ptr, &st);
			if (r == -1) {
				if(in_the_same_folder(con->url.path, p->physical.path)) {					
					if( smbc_rename(con->url.path->ptr, p->physical.path->ptr) ) {
						con->http_status = 500; //Internal Server Error
					} else {
						con->http_status = 201; //Created
					}
					con->file_finished = 1;
					return HANDLER_FINISHED;
				} else if (!smbc_wrapper_mkdir(con, p->physical.path->ptr, WEBDAV_DIR_MODE)) {
					con->http_status = 403;
					return HANDLER_FINISHED;
				}
			}
			else if (!S_ISDIR(st.st_mode)) {
				if (overwrite == 0) {
					/* copying into a non-dir ? */
					con->http_status = 409;
					return HANDLER_FINISHED;
				} else {
					//unlink(p->physical.path->ptr);
					smbc_wrapper_unlink(con, con->url.path->ptr);
					//if (-1 == mkdir(p->physical.path->ptr, WEBDAV_DIR_MODE)) {
					if (-1 == smbc_wrapper_mkdir(con, con->url.path->ptr, WEBDAV_DIR_MODE)) {
						con->http_status = 403;
						return HANDLER_FINISHED;
					}
				}
			}

			/* copy the content of src to dest */
			if (0 != (r = smbdav_copy_dir(srv, con, p, &(con->url), &(p->physical), overwrite))) {
				con->http_status = r;
				return HANDLER_FINISHED;
			}
			
			if (con->request.http_method == HTTP_METHOD_MOVE) {
				b = buffer_init();
				smbdav_delete_dir(srv, con, p, &(con->url), b); /* content */
				buffer_free(b);

				//rmdir(con->physical.path->ptr);
				smbc_wrapper_rmdir(con, con->url.path->ptr);
			}
			con->http_status = 201;
			con->file_finished = 1;
		} 
		else {
			/* it is just a file, good */
			int r;
			
			/* does the client have a lock for this connection ? */
			if (!smbdav_has_lock(srv, con, p, p->uri.path)) {
				con->http_status = 423;
				return HANDLER_FINISHED;
			}
			
			/* destination exists */
			if (0 == (r = smbc_wrapper_stat(con, con->url.path->ptr, &st))) {
				if (S_ISDIR(st.st_mode)) {
					/* file to dir/
					 * append basename to physical path */
					if (NULL != (sep = strrchr(con->physical.path->ptr, '/'))) {
						buffer_append_string(p->physical.path, sep);
						r = smbc_wrapper_stat(con, con->url.path->ptr, &st);
					}
				}
			}
			
			if (-1 == r) {
				con->http_status = 201; /* we will create a new one */
				con->file_finished = 1;

				switch(errno) {
				case ENOTDIR:
					con->http_status = 409;
					return HANDLER_FINISHED;
				}
			//} else if (overwrite == 0) {
				/* destination exists, but overwrite is not set */
				//con->http_status = 412;
				//return HANDLER_FINISHED;
			} else {
				con->http_status = 204; /* resource already existed */
			}
			
			if (con->request.http_method == HTTP_METHOD_MOVE) {				
				/* try a rename */				
				if (0 == smbc_rename(con->url.path->ptr, p->physical.path->ptr)) {					
#ifdef USE_PROPPATCH
					sqlite3_stmt *stmt;

					stmt = p->conf.stmt_delete_uri;
					if (stmt) {

						sqlite3_reset(stmt);

						/* bind the values to the insert */
						sqlite3_bind_text(stmt, 1,
								  con->uri.path->ptr,
								  con->uri.path->used - 1,
								  SQLITE_TRANSIENT);

						if (SQLITE_DONE != sqlite3_step(stmt)) {
							log_error_write(srv, __FILE__, __LINE__, "ss", "sql-move(delete old) failed:", sqlite3_errmsg(p->conf.sql));
						}
					}

					stmt = p->conf.stmt_move_uri;
					if (stmt) {

						sqlite3_reset(stmt);

						/* bind the values to the insert */
						sqlite3_bind_text(stmt, 1,
								  p->uri.path->ptr,
								  p->uri.path->used - 1,
								  SQLITE_TRANSIENT);

						sqlite3_bind_text(stmt, 2,
								  con->uri.path->ptr,
								  con->uri.path->used - 1,
								  SQLITE_TRANSIENT);

						if (SQLITE_DONE != sqlite3_step(stmt)) {
							log_error_write(srv, __FILE__, __LINE__, "ss", "sql-move failed:", sqlite3_errmsg(p->conf.sql));
						}
					}
#endif
					return HANDLER_FINISHED;
				}

				/* rename failed, fall back to COPY + DELETE */
			}
		
			if (0 != (r = smbdav_copy_file(srv, con, p, &(con->url), &(p->physical), overwrite))) {
				con->http_status = r;
				return HANDLER_FINISHED;
			}

			if (con->request.http_method == HTTP_METHOD_MOVE) {
				b = buffer_init();
				smbdav_delete_file(srv, con, p, &(con->physical), b);
				buffer_free(b);
			}
		}

		return HANDLER_FINISHED;
	}
	case HTTP_METHOD_PROPPATCH:
		if (p->conf.is_readonly) {
			con->http_status = 403;
			return HANDLER_FINISHED;
		}

		if (!smbdav_has_lock(srv, con, p, con->uri.path)) {
			con->http_status = 423;
			return HANDLER_FINISHED;
		}

		/* check if destination exists */
		if (-1 == smbc_wrapper_stat(con, con->physical.path->ptr, &st)) {
			switch(errno) {
			case ENOENT:
				con->http_status = 404;
				break;
			}
		}

#ifdef USE_PROPPATCH
		if (con->request.content_length) {
			xmlDocPtr xml;

			if (1 == smbdav_parse_chunkqueue(srv, con, p, con->request_content_queue, &xml)) {
				xmlNode *rootnode = xmlDocGetRootElement(xml);

				if (0 == xmlStrcmp(rootnode->name, BAD_CAST "propertyupdate")) {
					xmlNode *cmd;
					char *err = NULL;
					int empty_ns = 0; /* send 400 on a empty namespace attribute */

					/* start response */

					if (SQLITE_OK != sqlite3_exec(p->conf.sql, "BEGIN TRANSACTION", NULL, NULL, &err)) {
						log_error_write(srv, __FILE__, __LINE__, "ss", "can't open transaction:", err);
						sqlite3_free(err);

						goto propmatch_cleanup;
					}

					/* a UPDATE request, we know 'set' and 'remove' */
					for (cmd = rootnode->children; cmd; cmd = cmd->next) {
						xmlNode *props;
						/* either set or remove */

						if ((0 == xmlStrcmp(cmd->name, BAD_CAST "set")) ||
						    (0 == xmlStrcmp(cmd->name, BAD_CAST "remove"))) {

							sqlite3_stmt *stmt;

							stmt = (0 == xmlStrcmp(cmd->name, BAD_CAST "remove")) ?
								p->conf.stmt_delete_prop : p->conf.stmt_update_prop;

							for (props = cmd->children; props; props = props->next) {
								if (0 == xmlStrcmp(props->name, BAD_CAST "prop")) {
									xmlNode *prop;
									int r;

									prop = props->children;

									if (prop->ns &&
									    (0 == xmlStrcmp(prop->ns->href, BAD_CAST "")) &&
									    (0 != xmlStrcmp(prop->ns->prefix, BAD_CAST ""))) {
										log_error_write(srv, __FILE__, __LINE__, "ss",
												"no name space for:",
												prop->name);

										empty_ns = 1;
										break;
									}

									sqlite3_reset(stmt);

									/* bind the values to the insert */

									sqlite3_bind_text(stmt, 1,
											  con->uri.path->ptr,
											  con->uri.path->used - 1,
											  SQLITE_TRANSIENT);
									sqlite3_bind_text(stmt, 2,
											  (char *)prop->name,
											  strlen((char *)prop->name),
											  SQLITE_TRANSIENT);
									if (prop->ns) {
										sqlite3_bind_text(stmt, 3,
												  (char *)prop->ns->href,
												  strlen((char *)prop->ns->href),
												  SQLITE_TRANSIENT);
									} else {
										sqlite3_bind_text(stmt, 3,
												  "",
												  0,
												  SQLITE_TRANSIENT);
									}
									if (stmt == p->conf.stmt_update_prop) {
										sqlite3_bind_text(stmt, 4,
											  (char *)xmlNodeGetContent(prop),
											  strlen((char *)xmlNodeGetContent(prop)),
											  SQLITE_TRANSIENT);
									}

									if (SQLITE_DONE != (r = sqlite3_step(stmt))) {
										log_error_write(srv, __FILE__, __LINE__, "ss",
												"sql-set failed:", sqlite3_errmsg(p->conf.sql));
									}
								}
							}
							if (empty_ns) break;
						}
					}

					if (empty_ns) {
						if (SQLITE_OK != sqlite3_exec(p->conf.sql, "ROLLBACK", NULL, NULL, &err)) {
							log_error_write(srv, __FILE__, __LINE__, "ss", "can't rollback transaction:", err);
							sqlite3_free(err);

							goto propmatch_cleanup;
						}

						con->http_status = 400;
					} else {
						if (SQLITE_OK != sqlite3_exec(p->conf.sql, "COMMIT", NULL, NULL, &err)) {
							log_error_write(srv, __FILE__, __LINE__, "ss", "can't commit transaction:", err);
							sqlite3_free(err);

							goto propmatch_cleanup;
						}
						con->http_status = 200;
					}
					con->file_finished = 1;

					return HANDLER_FINISHED;
				}

propmatch_cleanup:

				xmlFreeDoc(xml);
			} else {
				con->http_status = 400;
				return HANDLER_FINISHED;
			}
		}
#endif
		con->http_status = 501;
		return HANDLER_FINISHED;
	case HTTP_METHOD_LOCK:		
		/**
		 * a mac wants to write
		 *
		 * LOCK /dav/expire.txt HTTP/1.1\r\n
		 * User-Agent: WebDAVFS/1.3 (01308000) Darwin/8.1.0 (Power Macintosh)\r\n
		 * Accept: * / *\r\n
		 * Depth: 0\r\n
		 * Timeout: Second-600\r\n
		 * Content-Type: text/xml; charset=\"utf-8\"\r\n
		 * Content-Length: 229\r\n
		 * Connection: keep-alive\r\n
		 * Host: 192.168.178.23:1025\r\n
		 * \r\n
		 * <?xml version=\"1.0\" encoding=\"utf-8\"?>\n
		 * <D:lockinfo xmlns:D=\"DAV:\">\n
		 *  <D:lockscope><D:exclusive/></D:lockscope>\n
		 *  <D:locktype><D:write/></D:locktype>\n
		 *  <D:owner>\n
		 *   <D:href>http://www.apple.com/smbdav_fs/</D:href>\n
		 *  </D:owner>\n
		 * </D:lockinfo>\n
		 */
		depth = 0;
		if (depth != 0 && depth != -1) {
			con->http_status = 400;

			return HANDLER_FINISHED;
		}

#ifdef USE_LOCKS
		if (con->request.content_length) {
			xmlDocPtr xml;
			buffer *hdr_if = NULL;

			if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "If"))) {
				hdr_if = ds->value;
			}

			/* we don't support Depth: Infinity on locks */
			if (hdr_if == NULL && depth == -1) {
				con->http_status = 409; /* Conflict */
				return HANDLER_FINISHED;
			}

			if (1 == smbdav_parse_chunkqueue(srv, con, p, con->request_content_queue, &xml)) {
				xmlNode *rootnode = xmlDocGetRootElement(xml);

				assert(rootnode);

				if (0 == xmlStrcmp(rootnode->name, BAD_CAST "lockinfo")) {
					xmlNode *lockinfo;
					const xmlChar *lockscope = NULL, *locktype = NULL; /* TODO: compiler says unused: *owner = NULL; */

					for (lockinfo = rootnode->children; lockinfo; lockinfo = lockinfo->next) {
						if (0 == xmlStrcmp(lockinfo->name, BAD_CAST "lockscope")) {
							xmlNode *value;
							for (value = lockinfo->children; value; value = value->next) {
								if ((0 == xmlStrcmp(value->name, BAD_CAST "exclusive")) ||
								    (0 == xmlStrcmp(value->name, BAD_CAST "shared"))) {
									lockscope = value->name;
								} else {
									con->http_status = 400;

									xmlFreeDoc(xml);
									return HANDLER_FINISHED;
								}
							}
						} else if (0 == xmlStrcmp(lockinfo->name, BAD_CAST "locktype")) {
							xmlNode *value;
							for (value = lockinfo->children; value; value = value->next) {
								if ((0 == xmlStrcmp(value->name, BAD_CAST "write"))) {
									locktype = value->name;
								} else {
									con->http_status = 400;

									xmlFreeDoc(xml);
									return HANDLER_FINISHED;
								}
							}

						} else if (0 == xmlStrcmp(lockinfo->name, BAD_CAST "owner")) {
						}
					}

					if (lockscope && locktype) {
						sqlite3_stmt *stmt = p->conf.stmt_read_lock_by_uri;

						/* is this resourse already locked ? */

						/* SELECT locktoken, resource, lockscope, locktype, owner, depth, timeout
						 *   FROM locks
						 *  WHERE resource = ? */

						if (stmt) {

							sqlite3_reset(stmt);

							sqlite3_bind_text(stmt, 1,
									  p->uri.path->ptr,
									  p->uri.path->used - 1,
									  SQLITE_TRANSIENT);

							/* it is the PK */
							while (SQLITE_ROW == sqlite3_step(stmt)) {
								/* we found a lock
								 * 1. is it compatible ?
								 * 2. is it ours */
								char *sql_lockscope = (char *)sqlite3_column_text(stmt, 2);

								if (strcmp(sql_lockscope, "exclusive")) {
									con->http_status = 423;
								} else if (0 == xmlStrcmp(lockscope, BAD_CAST "exclusive")) {
									/* resourse is locked with a shared lock
									 * client wants exclusive */
									con->http_status = 423;
								}
							}
							if (con->http_status == 423) {
								xmlFreeDoc(xml);
								return HANDLER_FINISHED;
							}
						}

						stmt = p->conf.stmt_create_lock;
						if (stmt) {
							/* create a lock-token */
							uuid_t id;
							char uuid[37] /* 36 + \0 */;

							uuid_generate(id);
							uuid_unparse(id, uuid);

							buffer_copy_string_len(p->tmp_buf, CONST_STR_LEN("opaquelocktoken:"));
							buffer_append_string(p->tmp_buf, uuid);

							/* "CREATE TABLE locks ("
							 * "  locktoken TEXT NOT NULL,"
							 * "  resource TEXT NOT NULL,"
							 * "  lockscope TEXT NOT NULL,"
							 * "  locktype TEXT NOT NULL,"
							 * "  owner TEXT NOT NULL,"
							 * "  depth INT NOT NULL,"
							 */

							sqlite3_reset(stmt);

							sqlite3_bind_text(stmt, 1,
									  CONST_BUF_LEN(p->tmp_buf),
									  SQLITE_TRANSIENT);

							sqlite3_bind_text(stmt, 2,
									  CONST_BUF_LEN(con->uri.path),
									  SQLITE_TRANSIENT);

							sqlite3_bind_text(stmt, 3,
									  (const char *)lockscope,
									  xmlStrlen(lockscope),
									  SQLITE_TRANSIENT);

							sqlite3_bind_text(stmt, 4,
									  (const char *)locktype,
									  xmlStrlen(locktype),
									  SQLITE_TRANSIENT);

							/* owner */
							sqlite3_bind_text(stmt, 5,
									  "",
									  0,
									  SQLITE_TRANSIENT);

							/* depth */
							sqlite3_bind_int(stmt, 6,
									 depth);


							if (SQLITE_DONE != sqlite3_step(stmt)) {
								log_error_write(srv, __FILE__, __LINE__, "ss",
										"create lock:", sqlite3_errmsg(p->conf.sql));
							}

							/* looks like we survived */
							smbdav_lockdiscovery(srv, con, p->tmp_buf, (const char *)lockscope, (const char *)locktype, depth);

							con->http_status = 201;
							con->file_finished = 1;
						}
					}
				}

				xmlFreeDoc(xml);
				return HANDLER_FINISHED;
			} else {
				con->http_status = 400;
				return HANDLER_FINISHED;
			}
		} else {

			if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "If"))) {
				buffer *locktoken = ds->value;
				sqlite3_stmt *stmt = p->conf.stmt_refresh_lock;

				/* remove the < > around the token */
				if (locktoken->used < 6) {
					con->http_status = 400;

					return HANDLER_FINISHED;
				}

				buffer_copy_string_len(p->tmp_buf, locktoken->ptr + 2, locktoken->used - 5);

				sqlite3_reset(stmt);

				sqlite3_bind_text(stmt, 1,
					  CONST_BUF_LEN(p->tmp_buf),
					  SQLITE_TRANSIENT);

				if (SQLITE_DONE != sqlite3_step(stmt)) {
					log_error_write(srv, __FILE__, __LINE__, "ss",
						"refresh lock:", sqlite3_errmsg(p->conf.sql));
				}

				smbdav_lockdiscovery(srv, con, p->tmp_buf, "exclusive", "write", 0);

				con->http_status = 200;
				con->file_finished = 1;
				return HANDLER_FINISHED;
			} else {
				/* we need a lock-token to refresh */
				con->http_status = 400;

				return HANDLER_FINISHED;
			}
		}
		break;
#else
		con->http_status = 501;
		return HANDLER_FINISHED;
#endif
	case HTTP_METHOD_UNLOCK:		
#ifdef USE_LOCKS
		if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "Lock-Token"))) {
			buffer *locktoken = ds->value;
			sqlite3_stmt *stmt = p->conf.stmt_remove_lock;

			/* remove the < > around the token */
			if (locktoken->used < 4) {
				con->http_status = 400;

				return HANDLER_FINISHED;
			}

			/**
			 * FIXME:
			 *
			 * if the resourse is locked:
			 * - by us: unlock
			 * - by someone else: 401
			 * if the resource is not locked:
			 * - 412
			 *  */

			buffer_copy_string_len(p->tmp_buf, locktoken->ptr + 1, locktoken->used - 3);

			sqlite3_reset(stmt);

			sqlite3_bind_text(stmt, 1,
				  CONST_BUF_LEN(p->tmp_buf),
				  SQLITE_TRANSIENT);

			sqlite3_bind_text(stmt, 2,
				  CONST_BUF_LEN(con->uri.path),
				  SQLITE_TRANSIENT);

			if (SQLITE_DONE != sqlite3_step(stmt)) {
				log_error_write(srv, __FILE__, __LINE__, "ss",
					"remove lock:", sqlite3_errmsg(p->conf.sql));
			}

			if (0 == sqlite3_changes(p->conf.sql)) {
				con->http_status = 401;
			} else {
				con->http_status = 204;
			}
			return HANDLER_FINISHED;
		} else {
			/* we need a lock-token to unlock */
			con->http_status = 400;

			return HANDLER_FINISHED;
		}
		break;
#else
		con->http_status = 501;
		return HANDLER_FINISHED;
#endif
	default:
		break;
	}

	/* not found */
	return HANDLER_GO_ON;
}

URIHANDLER_FUNC(mod_smbdav_trigger_handler){
	
	start_arpping_process(srv->srvconf.arpping_interface->ptr);
	return HANDLER_GO_ON;
}

/* this function is called at dlopen() time and inits the callbacks */

int mod_smbdav_plugin_init(plugin *p) {
	p->version     = LIGHTTPD_VERSION_ID;
	p->name        = buffer_init_string("smbdav");

	p->init        = mod_smbdav_init;

	p->handle_uri_clean  = mod_smbdav_uri_handler;
	p->handle_physical   = mod_smbdav_subrequest_handler;
	p->set_defaults  = mod_smbdav_set_defaults;
	p->cleanup     = mod_smbdav_free;
	p->data        = NULL;
	p->handle_connection_close = mod_msbdav_connection_close;

	//- Jerry add 20110930
	p->handle_trigger = mod_smbdav_trigger_handler;
	return 0;
}
