3,4c3,5
< # libtoolT - Provide generalized library-building support services.
< # Generated automatically by  (GNU libupnp 1.3.1)
---
> # libtool - Provide generalized library-building support services.
> # Generated automatically by config.status (libupnp) 1.3.1
> # Libtool was configured on host wireless-pub1:
7,8c8,10
< # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001
< # Free Software Foundation, Inc.
---
> #   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,
> #                 2006, 2007, 2008 Free Software Foundation, Inc.
> #   Written by Gordon Matzigkeit, 1996
10,11c12
< # This file is part of GNU Libtool:
< # Originally by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996
---
> #   This file is part of GNU Libtool.
13,16c14,17
< # This program is free software; you can redistribute it and/or modify
< # it under the terms of the GNU General Public License as published by
< # the Free Software Foundation; either version 2 of the License, or
< # (at your option) any later version.
---
> # GNU Libtool is free software; you can redistribute it and/or
> # modify it under the terms of the GNU General Public License as
> # published by the Free Software Foundation; either version 2 of
> # the License, or (at your option) any later version.
18,21c19,22
< # This program is distributed in the hope that it will be useful, but
< # WITHOUT ANY WARRANTY; without even the implied warranty of
< # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
< # General Public License for more details.
---
> # As a special exception to the GNU General Public License,
> # if you distribute this file as part of a program or library that
> # is built using GNU Libtool, you may include this file under the
> # same distribution terms that you use for the rest of that program.
23,25c24,27
< # You should have received a copy of the GNU General Public License
< # along with this program; if not, write to the Free Software
< # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
---
> # GNU Libtool is distributed in the hope that it will be useful,
> # but WITHOUT ANY WARRANTY; without even the implied warranty of
> # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
> # GNU General Public License for more details.
27,36c29,33
< # As a special exception to the GNU General Public License, if you
< # distribute this file as part of a program that contains a
< # configuration script generated by Autoconf, you may include it under
< # the same distribution terms that you use for the rest of that program.
< 
< # A sed program that does not truncate output.
< SED="/bin/sed"
< 
< # Sed that helps us avoid accidentally triggering echo(1) options like -n.
< Xsed="/bin/sed -e s/^X//"
---
> # You should have received a copy of the GNU General Public License
> # along with GNU Libtool; see the file COPYING.  If not, a copy
> # can be downloaded from http://www.gnu.org/licenses/gpl.html, or
> # obtained by writing to the Free Software Foundation, Inc.,
> # 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
38,40d34
< # The HP-UX ksh and POSIX shell print the target directory to stdout
< # if CDPATH is set.
< if test "X${CDPATH+set}" = Xset; then CDPATH=:; export CDPATH; fi
43c37
< available_tags=" CXX"
---
> available_tags=""
47,50c41,43
< # Libtool was configured on host wireless-pub1:
< 
< # Shell to use when invoking shell scripts.
< SHELL="/bin/bash"
---
> # Which release of libtool.m4 was used?
> macro_version=2.2.6b
> macro_revision=1.3017
58,62c51,52
< # Whether or not to add -lc for building shared libraries.
< build_libtool_need_lc=no
< 
< # Whether or not to disallow shared libs when runtime libs are static
< allow_libtool_libs_with_static_runtimes=no
---
> # What type of objects to build.
> pic_mode=default
69a60
> host_os=linux-gnu
71,76c62,65
< # An echo program that does not interpret backslashes.
< echo="echo"
< 
< # The archiver.
< AR="mipsel-uclibc-ar"
< AR_FLAGS="cru"
---
> # The build system.
> build_alias=i686-linux-gnu
> build=i686-pc-linux-gnu
> build_os=linux-gnu
78,79c67,68
< # A C compiler.
< LTCC="mipsel-uclibc-gcc"
---
> # A sed program that does not truncate output.
> SED="/bin/sed"
81,82c70,71
< # A language-specific compiler.
< CC="mipsel-uclibc-gcc"
---
> # Sed that helps us avoid accidentally triggering echo(1) options like -n.
> Xsed="$SED -e 1s/^X//"
84,85c73,74
< # Is the compiler the GNU C compiler?
< with_gcc=yes
---
> # A grep program that handles long lines.
> GREP="/bin/grep"
88,91c77
< EGREP="grep -E"
< 
< # The linker used to build libraries.
< LD="mipsel-uclibc-ld"
---
> EGREP="/bin/grep -E"
93,94c79,80
< # Whether we need hard or soft links.
< LN_S="ln -s"
---
> # A literal string matcher.
> FGREP="/bin/grep -F"
96c82
< # A BSD-compatible nm program.
---
> # A BSD- or MS-compatible name lister.
99,100c85,86
< # A symbol stripping program
< STRIP="mipsel-uclibc-strip -R .note -R .comment"
---
> # Whether we need soft or hard links.
> LN_S="ln -s"
102,103c88,89
< # Used to examine libraries when file_magic_cmd begins "file"
< MAGIC_CMD=file
---
> # What is the maximum length of a command?
> max_cmd_len=805306365
105,106c91,92
< # Used on cygwin: DLL creation program.
< DLLTOOL="dlltool"
---
> # Object file suffix (normally "o").
> objext=o
108,109c94,95
< # Used on cygwin: object dumper.
< OBJDUMP="objdump"
---
> # Executable file suffix (normally "").
> exeext=
111,112c97,98
< # Used on cygwin: assembler.
< AS="mipsel-uclibc-as"
---
> # whether the shell understands "unset".
> lt_unset=unset
114,115c100,104
< # The name of the directory that contains temporary libtool files.
< objdir=.libs
---
> # turn spaces into newlines.
> SP2NL="tr \\040 \\012"
> 
> # turn newlines into spaces.
> NL2SP="tr \\015\\012 \\040\\040"
121,122c110,111
< # How to pass a linker flag through the compiler.
< wl="-Wl,"
---
> # An object symbol dumper.
> OBJDUMP="mipsel-linux-objdump"
124,125c113,114
< # Object file suffix (normally "o").
< objext="o"
---
> # Method to check whether dependent libraries are shared objects.
> deplibs_check_method="pass_all"
127,128c116,117
< # Old archive suffix (normally "a").
< libext="a"
---
> # Command to use when deplibs_check_method == "file_magic".
> file_magic_cmd="\$MAGIC_CMD"
130,131c119,121
< # Shared library suffix (normally ".so").
< shrext_cmds='.so'
---
> # The archiver.
> AR="mipsel-uclibc-ar"
> AR_FLAGS="cru"
133,134c123,124
< # Executable file suffix (normally "").
< exeext=""
---
> # A symbol stripping program.
> STRIP="mipsel-uclibc-strip -R .note -R .comment"
136,138c126,129
< # Additional compiler flags for building library objects.
< pic_flag=" -fPIC -DPIC"
< pic_mode=default
---
> # Commands used to install an old-style archive.
> RANLIB="mipsel-uclibc-ranlib"
> old_postinstall_cmds="chmod 644 \$oldlib~\$RANLIB \$oldlib"
> old_postuninstall_cmds=""
140,141c131,132
< # What is the maximum length of a command?
< max_cmd_len=32768
---
> # A C compiler.
> LTCC="mipsel-uclibc-gcc"
143,144c134,138
< # Does compiler simultaneously support -c and -o options?
< compiler_c_o="yes"
---
> # LTCC compiler flags.
> LTCFLAGS="-g -O2 -Os -Wall"
> 
> # Take the output of nm and produce a listing of raw symbols and C names.
> global_symbol_pipe="sed -n -e 's/^.*[	 ]\\([ABCDGIRSTW][ABCDGIRSTW]*\\)[	 ][	 ]*\\([_A-Za-z][_A-Za-z0-9]*\\)\$/\\1 \\2 \\2/p'"
146c140,161
< # Must we lock files when doing compilation ?
---
> # Transform the output of nm in a proper C declaration.
> global_symbol_to_cdecl="sed -n -e 's/^T .* \\(.*\\)\$/extern int \\1();/p' -e 's/^[ABCDGIRSTW]* .* \\(.*\\)\$/extern char \\1;/p'"
> 
> # Transform the output of nm in a C name address pair.
> global_symbol_to_c_name_address="sed -n -e 's/^: \\([^ ]*\\) \$/  {\\\"\\1\\\", (void *) 0},/p' -e 's/^[ABCDGIRSTW]* \\([^ ]*\\) \\([^ ]*\\)\$/  {\"\\2\", (void *) \\&\\2},/p'"
> 
> # Transform the output of nm in a C name address pair when lib prefix is needed.
> global_symbol_to_c_name_address_lib_prefix="sed -n -e 's/^: \\([^ ]*\\) \$/  {\\\"\\1\\\", (void *) 0},/p' -e 's/^[ABCDGIRSTW]* \\([^ ]*\\) \\(lib[^ ]*\\)\$/  {\"\\2\", (void *) \\&\\2},/p' -e 's/^[ABCDGIRSTW]* \\([^ ]*\\) \\([^ ]*\\)\$/  {\"lib\\2\", (void *) \\&\\2},/p'"
> 
> # The name of the directory that contains temporary libtool files.
> objdir=.libs
> 
> # Shell to use when invoking shell scripts.
> SHELL="/bin/bash"
> 
> # An echo program that does not interpret backslashes.
> ECHO="echo"
> 
> # Used to examine libraries when file_magic_cmd begins with "file".
> MAGIC_CMD=file
> 
> # Must we lock files when doing compilation?
149,150c164,165
< # Do we need the lib prefix for modules?
< need_lib_prefix=no
---
> # Tool to manipulate archived DWARF debug symbol files on Mac OS X.
> DSYMUTIL=""
152,153c167,168
< # Do we need a version for libraries?
< need_version=no
---
> # Tool to change global to local symbols on Mac OS X.
> NMEDIT=""
155,156c170,171
< # Whether dlopen is supported.
< dlopen_support=unknown
---
> # Tool to manipulate fat objects and archives on Mac OS X.
> LIPO=""
158,159c173,174
< # Whether dlopen of programs is supported.
< dlopen_self=unknown
---
> # ldd/readelf like tool for Mach-O binaries on Mac OS X.
> OTOOL=""
161,162c176,177
< # Whether dlopen of statically linked programs is supported.
< dlopen_self_static=unknown
---
> # ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4.
> OTOOL64=""
164,165c179,180
< # Compiler flag to prevent dynamic linking.
< link_static_flag="-static"
---
> # Old archive suffix (normally "a").
> libext=a
167,168c182,183
< # Compiler flag to turn off builtin functions.
< no_builtin_flag=" -fno-builtin"
---
> # Shared library suffix (normally ".so").
> shrext_cmds=".so"
170,171c185,186
< # Compiler flag to allow reflexive dlopens.
< export_dynamic_flag_spec="\${wl}--export-dynamic"
---
> # The commands to extract the exported symbol list from a shared archive.
> extract_expsyms_cmds=""
173,174c188,190
< # Compiler flag to generate shared objects directly from archives.
< whole_archive_flag_spec="\${wl}--whole-archive\$convenience \${wl}--no-whole-archive"
---
> # Variables whose values should be saved in libtool wrapper scripts and
> # restored at link time.
> variables_saved_for_relink="PATH LD_LIBRARY_PATH LD_RUN_PATH GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH"
176,177c192,196
< # Compiler flag to generate thread-safe objects.
< thread_safe_flag_spec=""
---
> # Do we need the "lib" prefix for modules?
> need_lib_prefix=no
> 
> # Do we need a version for libraries?
> need_version=no
181a201,209
> # Shared library runtime path variable.
> runpath_var=LD_RUN_PATH
> 
> # Shared library path variable.
> shlibpath_var=LD_LIBRARY_PATH
> 
> # Is shlibpath searched before the hard-coded library search path?
> shlibpath_overrides_runpath=no
> 
186c214
< # The last name is the one that the linker finds with -lNAME.
---
> # The last name is the one that the linker finds with -lNAME
192,196c220,221
< # Commands used to build and install an old-style archive.
< RANLIB="mipsel-uclibc-ranlib"
< old_archive_cmds="\$AR \$AR_FLAGS \$oldlib\$oldobjs\$old_deplibs~\$RANLIB \$oldlib"
< old_postinstall_cmds="\$RANLIB \$oldlib~chmod 644 \$oldlib"
< old_postuninstall_cmds=""
---
> # Command to use after installation of a shared archive.
> postinstall_cmds=""
198,199c223,224
< # Create an old-style archive from a shared archive.
< old_archive_from_new_cmds=""
---
> # Command to use after uninstallation of a shared archive.
> postuninstall_cmds=""
201,202c226,227
< # Create a temporary old-style archive to link instead of a shared archive.
< old_archive_from_expsyms_cmds=""
---
> # Commands used to finish a libtool library installation in a directory.
> finish_cmds="PATH=\\\"\\\$PATH:/sbin\\\" ldconfig -n \$libdir"
204,211c229,231
< # Commands used to build and install a shared archive.
< archive_cmds="\$CC -shared \$libobjs \$deplibs \$compiler_flags \${wl}-soname \$wl\$soname -o \$lib"
< archive_expsym_cmds="\$echo \\\"{ global:\\\" > \$output_objdir/\$libname.ver~
< cat \$export_symbols | sed -e \\\"s/\\\\(.*\\\\)/\\\\1;/\\\" >> \$output_objdir/\$libname.ver~
< \$echo \\\"local: *; };\\\" >> \$output_objdir/\$libname.ver~
<         \$CC -shared \$libobjs \$deplibs \$compiler_flags \${wl}-soname \$wl\$soname \${wl}-version-script \${wl}\$output_objdir/\$libname.ver -o \$lib"
< postinstall_cmds=""
< postuninstall_cmds=""
---
> # As "finish_cmds", except a single script fragment to be evaled but
> # not shown.
> finish_eval=""
213,215c233,249
< # Commands used to build a loadable module (assumed same as above if empty)
< module_cmds=""
< module_expsym_cmds=""
---
> # Whether we should hardcode library paths into libraries.
> hardcode_into_libs=yes
> 
> # Compile-time system search path for libraries.
> sys_lib_search_path_spec="/home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/lib/gcc/mipsel-linux-uclibc/4.2.4 /home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/lib/gcc /home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/mipsel-linux-uclibc/lib"
> 
> # Run-time system search path for libraries.
> sys_lib_dlsearch_path_spec="/lib /usr/lib /usr/lib/fglrx /lib/i386-linux-gnu /usr/lib/i386-linux-gnu /lib/i686-linux-gnu /usr/lib/i686-linux-gnu /usr/lib/alsa-lib /usr/local/lib "
> 
> # Whether dlopen is supported.
> dlopen_support=unknown
> 
> # Whether dlopen of programs is supported.
> dlopen_self=unknown
> 
> # Whether dlopen of statically linked programs is supported.
> dlopen_self_static=unknown
221,239d254
< # Dependencies to place before the objects being linked to create a
< # shared library.
< predep_objects=""
< 
< # Dependencies to place after the objects being linked to create a
< # shared library.
< postdep_objects=""
< 
< # Dependencies to place before the objects being linked to create a
< # shared library.
< predeps=""
< 
< # Dependencies to place after the objects being linked to create a
< # shared library.
< postdeps=""
< 
< # The library search path used internally by the compiler when linking
< # a shared library.
< compiler_lib_search_path=""
241,242c256,257
< # Method to check whether dependent libraries are shared objects.
< deplibs_check_method="pass_all"
---
> # The linker used to build libraries.
> LD="mipsel-uclibc-ld"
244,245c259,260
< # Command to use when deplibs_check_method == file_magic.
< file_magic_cmd="\$MAGIC_CMD"
---
> # Commands used to build an old-style archive.
> old_archive_cmds="\$AR \$AR_FLAGS \$oldlib\$oldobjs~\$RANLIB \$oldlib"
247,248c262,263
< # Flag that allows shared libraries with undefined symbols to be built.
< allow_undefined_flag=""
---
> # A language specific compiler.
> CC="mipsel-uclibc-gcc"
250,251c265,266
< # Flag that forces no undefined symbols.
< no_undefined_flag=""
---
> # Is the compiler the GNU compiler?
> with_gcc=yes
253,254c268,269
< # Commands used to finish a libtool library installation in a directory.
< finish_cmds="PATH=\\\"\\\$PATH:/sbin\\\" ldconfig -n \$libdir"
---
> # Compiler flag to turn off builtin functions.
> no_builtin_flag=" -fno-builtin"
256,257c271,272
< # Same as above, but a single script fragment to be evaled but not shown.
< finish_eval=""
---
> # How to pass a linker flag through the compiler.
> wl="-Wl,"
259,260c274,275
< # Take the output of nm and produce a listing of raw symbols and C names.
< global_symbol_pipe="sed -n -e 's/^.*[ 	]\\([ABCDGIRSTW][ABCDGIRSTW]*\\)[ 	][ 	]*\\(\\)\\([_A-Za-z][_A-Za-z0-9]*\\)\$/\\1 \\2\\3 \\3/p'"
---
> # Additional compiler flags for building library objects.
> pic_flag=" -fPIC -DPIC"
262,263c277,278
< # Transform the output of nm in a proper C declaration
< global_symbol_to_cdecl="sed -n -e 's/^. .* \\(.*\\)\$/extern int \\1;/p'"
---
> # Compiler flag to prevent dynamic linking.
> link_static_flag="-static"
265,266c280,281
< # Transform the output of nm in a C name address pair
< global_symbol_to_c_name_address="sed -n -e 's/^: \\([^ ]*\\) \$/  {\\\"\\1\\\", (lt_ptr) 0},/p' -e 's/^[BCDEGRST] \\([^ ]*\\) \\([^ ]*\\)\$/  {\"\\2\", (lt_ptr) \\&\\2},/p'"
---
> # Does compiler simultaneously support -c and -o options?
> compiler_c_o="yes"
268,269c283,284
< # This is the shared library runtime path variable.
< runpath_var=LD_RUN_PATH
---
> # Whether or not to add -lc for building shared libraries.
> build_libtool_need_lc=no
271,272c286,287
< # This is the shared library path variable.
< shlibpath_var=LD_LIBRARY_PATH
---
> # Whether or not to disallow shared libs when runtime libs are static.
> allow_libtool_libs_with_static_runtimes=no
274,275c289,290
< # Is shlibpath searched before the hard-coded library search path?
< shlibpath_overrides_runpath=no
---
> # Compiler flag to allow reflexive dlopens.
> export_dynamic_flag_spec="\${wl}--export-dynamic"
277,278c292,293
< # How to hardcode a shared library path into an executable.
< hardcode_action=immediate
---
> # Compiler flag to generate shared objects directly from archives.
> whole_archive_flag_spec="\${wl}--whole-archive\$convenience \${wl}--no-whole-archive"
280,281c295,323
< # Whether we should hardcode library paths into libraries.
< hardcode_into_libs=yes
---
> # Whether the compiler copes with passing no objects directly.
> compiler_needs_object="no"
> 
> # Create an old-style archive from a shared archive.
> old_archive_from_new_cmds=""
> 
> # Create a temporary old-style archive to link instead of a shared archive.
> old_archive_from_expsyms_cmds=""
> 
> # Commands used to build a shared archive.
> archive_cmds="\$CC -shared \$libobjs \$deplibs \$compiler_flags \${wl}-soname \$wl\$soname -o \$lib"
> archive_expsym_cmds="echo \\\"{ global:\\\" > \$output_objdir/\$libname.ver~
> 	    cat \$export_symbols | sed -e \\\"s/\\\\(.*\\\\)/\\\\1;/\\\" >> \$output_objdir/\$libname.ver~
> 	    echo \\\"local: *; };\\\" >> \$output_objdir/\$libname.ver~
> 	    \$CC -shared \$libobjs \$deplibs \$compiler_flags \${wl}-soname \$wl\$soname \${wl}-version-script \${wl}\$output_objdir/\$libname.ver -o \$lib"
> 
> # Commands used to build a loadable module if different from building
> # a shared archive.
> module_cmds=""
> module_expsym_cmds=""
> 
> # Whether we are building with GNU ld or not.
> with_gnu_ld="yes"
> 
> # Flag that allows shared libraries with undefined symbols to be built.
> allow_undefined_flag=""
> 
> # Flag that enforces no undefined symbols.
> no_undefined_flag=""
284,285c326,327
< # This must work even if $libdir does not exist.
< hardcode_libdir_flag_spec="\${wl}--rpath \${wl}\$libdir"
---
> # This must work even if $libdir does not exist
> hardcode_libdir_flag_spec="\${wl}-rpath \${wl}\$libdir"
287,289c329,330
< # If ld is used when linking, flag to hardcode $libdir into
< # a binary during linking. This must work even if $libdir does
< # not exist.
---
> # If ld is used when linking, flag to hardcode $libdir into a binary
> # during linking.  This must work even if $libdir does not exist.
292c333
< # Whether we need a single -rpath flag with a separated argument.
---
> # Whether we need a single "-rpath" flag with a separated argument.
295,296c336,337
< # Set to yes if using DIR/libNAME during linking hardcodes DIR into the
< # resulting binary.
---
> # Set to "yes" if using DIR/libNAME${shared_ext} during linking hardcodes
> # DIR into the resulting binary.
299,300c340,347
< # Set to yes if using the -LDIR flag during linking hardcodes DIR into the
< # resulting binary.
---
> # Set to "yes" if using DIR/libNAME${shared_ext} during linking hardcodes
> # DIR into the resulting binary and the resulting library dependency is
> # "absolute",i.e impossible to change by setting ${shlibpath_var} if the
> # library is relocated.
> hardcode_direct_absolute=no
> 
> # Set to "yes" if using the -LDIR flag during linking hardcodes DIR
> # into the resulting binary.
303,304c350,351
< # Set to yes if using SHLIBPATH_VAR=DIR during linking hardcodes DIR into
< # the resulting binary.
---
> # Set to "yes" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR
> # into the resulting binary.
307,308c354,356
< # Set to yes if building a shared library automatically hardcodes DIR into the library
< # and all subsequent libraries and executables linked against it.
---
> # Set to "yes" if building a shared library automatically hardcodes DIR
> # into the library and all subsequent libraries and executables linked
> # against it.
311,313c359,361
< # Variables whose values should be saved in libtool wrapper scripts and
< # restored at relink time.
< variables_saved_for_relink="PATH  LD_RUN_PATH GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH"
---
> # Set to yes if linker adds runtime paths of dependent libraries
> # to runtime path list.
> inherit_rpath=no
316,322c364
< link_all_deplibs=unknown
< 
< # Compile-time system search path for libraries
< sys_lib_search_path_spec="/lib /usr/lib /usr/X11R6/lib /usr/local/lib include /etc/ld.so.conf.d/*.conf  "
< 
< # Run-time system search path for libraries
< sys_lib_dlsearch_path_spec="/lib /usr/lib /usr/X11R6/lib include /etc/ld.so.conf.d/*.conf  "
---
> link_all_deplibs=no
327c369
< # Set to yes if exported symbols are required.
---
> # Set to "yes" if exported symbols are required.
333,335d374
< # The commands to extract the exported symbol list from a shared archive.
< extract_expsyms_cmds=""
< 
337c376
< exclude_expsyms="_GLOBAL_OFFSET_TABLE_"
---
> exclude_expsyms="_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*"
341a381,389
> # Commands necessary for linking programs (against libraries) with templates.
> prelink_cmds=""
> 
> # Specify filename containing input files.
> file_list_spec=""
> 
> # How to hardcode a shared library path into an executable.
> hardcode_action=immediate
> 
6787,6814d6834
< # ### BEGIN LIBTOOL TAG CONFIG: CXX
< 
< # Libtool was configured on host wireless-pub1:
< 
< # Shell to use when invoking shell scripts.
< SHELL="/bin/bash"
< 
< # Whether or not to build shared libraries.
< build_libtool_libs=yes
< 
< # Whether or not to build static libraries.
< build_old_libs=yes
< 
< # Whether or not to add -lc for building shared libraries.
< build_libtool_need_lc=no
< 
< # Whether or not to disallow shared libs when runtime libs are static
< allow_libtool_libs_with_static_runtimes=no
< 
< # Whether or not to optimize for fast installation.
< fast_install=yes
< 
< # The host system.
< host_alias=mipsel-linux
< host=mipsel-unknown-linux-gnu
< 
< # An echo program that does not interpret backslashes.
< echo="echo"
6816,7055c6836,6845
< # The archiver.
< AR="mipsel-uclibc-ar"
< AR_FLAGS="cru"
< 
< # A C compiler.
< LTCC="mipsel-uclibc-gcc"
< 
< # A language-specific compiler.
< CC="mipsel-linux-g++"
< 
< # Is the compiler the GNU C compiler?
< with_gcc=yes
< 
< # An ERE matcher.
< EGREP="grep -E"
< 
< # The linker used to build libraries.
< LD="mipsel-uclibc-ld"
< 
< # Whether we need hard or soft links.
< LN_S="ln -s"
< 
< # A BSD-compatible nm program.
< NM="mipsel-uclibc-nm"
< 
< # A symbol stripping program
< STRIP="mipsel-uclibc-strip -R .note -R .comment"
< 
< # Used to examine libraries when file_magic_cmd begins "file"
< MAGIC_CMD=file
< 
< # Used on cygwin: DLL creation program.
< DLLTOOL="dlltool"
< 
< # Used on cygwin: object dumper.
< OBJDUMP="objdump"
< 
< # Used on cygwin: assembler.
< AS="mipsel-uclibc-as"
< 
< # The name of the directory that contains temporary libtool files.
< objdir=.libs
< 
< # How to create reloadable object files.
< reload_flag=" -r"
< reload_cmds="\$LD\$reload_flag -o \$output\$reload_objs"
< 
< # How to pass a linker flag through the compiler.
< wl="-Wl,"
< 
< # Object file suffix (normally "o").
< objext="o"
< 
< # Old archive suffix (normally "a").
< libext="a"
< 
< # Shared library suffix (normally ".so").
< shrext_cmds='.so'
< 
< # Executable file suffix (normally "").
< exeext=""
< 
< # Additional compiler flags for building library objects.
< pic_flag=" -fPIC -DPIC"
< pic_mode=default
< 
< # What is the maximum length of a command?
< max_cmd_len=32768
< 
< # Does compiler simultaneously support -c and -o options?
< compiler_c_o="yes"
< 
< # Must we lock files when doing compilation ?
< need_locks="no"
< 
< # Do we need the lib prefix for modules?
< need_lib_prefix=no
< 
< # Do we need a version for libraries?
< need_version=no
< 
< # Whether dlopen is supported.
< dlopen_support=unknown
< 
< # Whether dlopen of programs is supported.
< dlopen_self=unknown
< 
< # Whether dlopen of statically linked programs is supported.
< dlopen_self_static=unknown
< 
< # Compiler flag to prevent dynamic linking.
< link_static_flag="-static"
< 
< # Compiler flag to turn off builtin functions.
< no_builtin_flag=" -fno-builtin"
< 
< # Compiler flag to allow reflexive dlopens.
< export_dynamic_flag_spec="\${wl}--export-dynamic"
< 
< # Compiler flag to generate shared objects directly from archives.
< whole_archive_flag_spec="\${wl}--whole-archive\$convenience \${wl}--no-whole-archive"
< 
< # Compiler flag to generate thread-safe objects.
< thread_safe_flag_spec=""
< 
< # Library versioning type.
< version_type=linux
< 
< # Format of library name prefix.
< libname_spec="lib\$name"
< 
< # List of archive names.  First name is the real one, the rest are links.
< # The last name is the one that the linker finds with -lNAME.
< library_names_spec="\${libname}\${release}\${shared_ext}\$versuffix \${libname}\${release}\${shared_ext}\$major \$libname\${shared_ext}"
< 
< # The coded name of the library, if different from the real name.
< soname_spec="\${libname}\${release}\${shared_ext}\$major"
< 
< # Commands used to build and install an old-style archive.
< RANLIB="mipsel-uclibc-ranlib"
< old_archive_cmds="\$AR \$AR_FLAGS \$oldlib\$oldobjs\$old_deplibs~\$RANLIB \$oldlib"
< old_postinstall_cmds="\$RANLIB \$oldlib~chmod 644 \$oldlib"
< old_postuninstall_cmds=""
< 
< # Create an old-style archive from a shared archive.
< old_archive_from_new_cmds=""
< 
< # Create a temporary old-style archive to link instead of a shared archive.
< old_archive_from_expsyms_cmds=""
< 
< # Commands used to build and install a shared archive.
< archive_cmds="\$CC -shared -nostdlib \$predep_objects \$libobjs \$deplibs \$postdep_objects \$compiler_flags \${wl}-soname \$wl\$soname -o \$lib"
< archive_expsym_cmds="\$CC -shared -nostdlib \$predep_objects \$libobjs \$deplibs \$postdep_objects \$compiler_flags \${wl}-soname \$wl\$soname \${wl}-retain-symbols-file \$wl\$export_symbols -o \$lib"
< postinstall_cmds=""
< postuninstall_cmds=""
< 
< # Commands used to build a loadable module (assumed same as above if empty)
< module_cmds=""
< module_expsym_cmds=""
< 
< # Commands to strip libraries.
< old_striplib="mipsel-uclibc-strip -R .note -R .comment --strip-debug"
< striplib="mipsel-uclibc-strip -R .note -R .comment --strip-unneeded"
< 
< # Dependencies to place before the objects being linked to create a
< # shared library.
< predep_objects="/home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc/mipsel-linux-uclibc/4.2.4/../../../../mipsel-linux-uclibc/lib/crti.o /home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc/mipsel-linux-uclibc/4.2.4/crtbeginS.o"
< 
< # Dependencies to place after the objects being linked to create a
< # shared library.
< postdep_objects="/home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc/mipsel-linux-uclibc/4.2.4/crtendS.o /home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc/mipsel-linux-uclibc/4.2.4/../../../../mipsel-linux-uclibc/lib/crtn.o"
< 
< # Dependencies to place before the objects being linked to create a
< # shared library.
< predeps=""
< 
< # Dependencies to place after the objects being linked to create a
< # shared library.
< postdeps="-lstdc++ -lm -lgcc_s -lc -lgcc_s"
< 
< # The library search path used internally by the compiler when linking
< # a shared library.
< compiler_lib_search_path="-L/home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc/mipsel-linux-uclibc/4.2.4 -L/home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc -L/home/gitserv_asus/project/asuswrt/tools/brcm/K26/hndtools-mipsel-uclibc-4.2.4/bin/../lib/gcc/mipsel-linux-uclibc/4.2.4/../../../../mipsel-linux-uclibc/lib"
< 
< # Method to check whether dependent libraries are shared objects.
< deplibs_check_method="pass_all"
< 
< # Command to use when deplibs_check_method == file_magic.
< file_magic_cmd="\$MAGIC_CMD"
< 
< # Flag that allows shared libraries with undefined symbols to be built.
< allow_undefined_flag=""
< 
< # Flag that forces no undefined symbols.
< no_undefined_flag=""
< 
< # Commands used to finish a libtool library installation in a directory.
< finish_cmds="PATH=\\\"\\\$PATH:/sbin\\\" ldconfig -n \$libdir"
< 
< # Same as above, but a single script fragment to be evaled but not shown.
< finish_eval=""
< 
< # Take the output of nm and produce a listing of raw symbols and C names.
< global_symbol_pipe="sed -n -e 's/^.*[ 	]\\([ABCDGIRSTW][ABCDGIRSTW]*\\)[ 	][ 	]*\\(\\)\\([_A-Za-z][_A-Za-z0-9]*\\)\$/\\1 \\2\\3 \\3/p'"
< 
< # Transform the output of nm in a proper C declaration
< global_symbol_to_cdecl="sed -n -e 's/^. .* \\(.*\\)\$/extern int \\1;/p'"
< 
< # Transform the output of nm in a C name address pair
< global_symbol_to_c_name_address="sed -n -e 's/^: \\([^ ]*\\) \$/  {\\\"\\1\\\", (lt_ptr) 0},/p' -e 's/^[BCDEGRST] \\([^ ]*\\) \\([^ ]*\\)\$/  {\"\\2\", (lt_ptr) \\&\\2},/p'"
< 
< # This is the shared library runtime path variable.
< runpath_var=LD_RUN_PATH
< 
< # This is the shared library path variable.
< shlibpath_var=LD_LIBRARY_PATH
< 
< # Is shlibpath searched before the hard-coded library search path?
< shlibpath_overrides_runpath=no
< 
< # How to hardcode a shared library path into an executable.
< hardcode_action=immediate
< 
< # Whether we should hardcode library paths into libraries.
< hardcode_into_libs=yes
< 
< # Flag to hardcode $libdir into a binary during linking.
< # This must work even if $libdir does not exist.
< hardcode_libdir_flag_spec="\${wl}--rpath \${wl}\$libdir"
< 
< # If ld is used when linking, flag to hardcode $libdir into
< # a binary during linking. This must work even if $libdir does
< # not exist.
< hardcode_libdir_flag_spec_ld=""
< 
< # Whether we need a single -rpath flag with a separated argument.
< hardcode_libdir_separator=""
< 
< # Set to yes if using DIR/libNAME during linking hardcodes DIR into the
< # resulting binary.
< hardcode_direct=no
< 
< # Set to yes if using the -LDIR flag during linking hardcodes DIR into the
< # resulting binary.
< hardcode_minus_L=no
< 
< # Set to yes if using SHLIBPATH_VAR=DIR during linking hardcodes DIR into
< # the resulting binary.
< hardcode_shlibpath_var=
< 
< # Set to yes if building a shared library automatically hardcodes DIR into the library
< # and all subsequent libraries and executables linked against it.
< hardcode_automatic=no
< 
< # Variables whose values should be saved in libtool wrapper scripts and
< # restored at relink time.
< variables_saved_for_relink="PATH LD_LIBRARY_PATH LD_RUN_PATH GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH"
< 
< # Whether libtool must link a program against all its dependency libraries.
< link_all_deplibs=unknown
---
> # func_dirname file append nondir_replacement
> # Compute the dirname of FILE.  If nonempty, add APPEND to the result,
> # otherwise set result to NONDIR_REPLACEMENT.
> func_dirname ()
> {
>   case ${1} in
>     */*) func_dirname_result="${1%/*}${2}" ;;
>     *  ) func_dirname_result="${3}" ;;
>   esac
> }
7057,7058c6847,6851
< # Compile-time system search path for libraries
< sys_lib_search_path_spec="/lib /usr/lib /usr/X11R6/lib /usr/local/lib include /etc/ld.so.conf.d/*.conf  "
---
> # func_basename file
> func_basename ()
> {
>   func_basename_result="${1##*/}"
> }
7060,7061c6853,6872
< # Run-time system search path for libraries
< sys_lib_dlsearch_path_spec="/lib /usr/lib /usr/X11R6/lib include /etc/ld.so.conf.d/*.conf  "
---
> # func_dirname_and_basename file append nondir_replacement
> # perform func_basename and func_dirname in a single function
> # call:
> #   dirname:  Compute the dirname of FILE.  If nonempty,
> #             add APPEND to the result, otherwise set result
> #             to NONDIR_REPLACEMENT.
> #             value returned in "$func_dirname_result"
> #   basename: Compute filename of FILE.
> #             value retuned in "$func_basename_result"
> # Implementation must be kept synchronized with func_dirname
> # and func_basename. For efficiency, we do not delegate to
> # those functions but instead duplicate the functionality here.
> func_dirname_and_basename ()
> {
>   case ${1} in
>     */*) func_dirname_result="${1%/*}${2}" ;;
>     *  ) func_dirname_result="${3}" ;;
>   esac
>   func_basename_result="${1##*/}"
> }
7063,7064c6874,6886
< # Fix the shell variable $srcfile for the compiler.
< fix_srcfile_path=""
---
> # func_stripname prefix suffix name
> # strip PREFIX and SUFFIX off of NAME.
> # PREFIX and SUFFIX must not contain globbing or regex special
> # characters, hashes, percent signs, but SUFFIX may contain a leading
> # dot (in which case that matches only a dot).
> func_stripname ()
> {
>   # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are
>   # positional parameters, so assign one to ordinary parameter first.
>   func_stripname_result=${3}
>   func_stripname_result=${func_stripname_result#"${1}"}
>   func_stripname_result=${func_stripname_result%"${2}"}
> }
7066,7067c6888,6893
< # Set to yes if exported symbols are required.
< always_export_symbols=no
---
> # func_opt_split
> func_opt_split ()
> {
>   func_opt_split_opt=${1%%=*}
>   func_opt_split_arg=${1#*=}
> }
7069,7070c6895,6902
< # The commands to list exported symbols.
< export_symbols_cmds="\$NM \$libobjs \$convenience | \$global_symbol_pipe | \$SED 's/.* //' | sort | uniq > \$export_symbols"
---
> # func_lo2o object
> func_lo2o ()
> {
>   case ${1} in
>     *.lo) func_lo2o_result=${1%.lo}.${objext} ;;
>     *)    func_lo2o_result=${1} ;;
>   esac
> }
7072,7073c6904,6908
< # The commands to extract the exported symbol list from a shared archive.
< extract_expsyms_cmds=""
---
> # func_xform libobj-or-source
> func_xform ()
> {
>   func_xform_result=${1%.*}.lo
> }
7075,7076c6910,6914
< # Symbols that should not be listed in the preloaded symbols.
< exclude_expsyms=""
---
> # func_arith arithmetic-term...
> func_arith ()
> {
>   func_arith_result=$(( $* ))
> }
7078,7079c6916,6921
< # Symbols that must always be exported.
< include_expsyms=""
---
> # func_len string
> # STRING may not start with a hyphen.
> func_len ()
> {
>   func_len_result=${#1}
> }
7081d6922
< # ### END LIBTOOL TAG CONFIG: CXX
7082a6924,6929
> # func_append var value
> # Append VALUE to the end of shell variable VAR.
> func_append ()
> {
>   eval "$1+=\$2"
> }
