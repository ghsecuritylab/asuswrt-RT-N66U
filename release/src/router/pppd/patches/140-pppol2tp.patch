diff -BurpN ppp.orig/pppd/plugins/pppol2tp/pppol2tp.c ppp/pppd/plugins/pppol2tp/pppol2tp.c
--- ppp.orig/pppd/plugins/pppol2tp/pppol2tp.c	2008-11-26 10:02:29.000000000 +0000
+++ ppp/pppd/plugins/pppol2tp/pppol2tp.c	2009-09-01 18:18:20.000000000 +0000
@@ -119,14 +119,8 @@ static option_t pppol2tp_options[] = {
 
 static int setdevname_pppol2tp(char **argv)
 {
-	union {
-		char buffer[128];
-		struct sockaddr pppol2tp;
-	} s;
-	int len = sizeof(s);
-	char **a;
-	int tmp;
-	int tmp_len = sizeof(tmp);
+	struct sockaddr_pppol2tp sax;
+	int len = sizeof(sax);
 
 	if (device_got_set)
 		return 0;
@@ -134,21 +128,21 @@ static int setdevname_pppol2tp(char **ar
 	if (!int_option(*argv, &pppol2tp_fd))
 		return 0;
 
-	if(getsockname(pppol2tp_fd, (struct sockaddr *)&s, &len) < 0) {
+	if(getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len) < 0) {
 		fatal("Given FD for PPPoL2TP socket invalid (%s)",
 		      strerror(errno));
 	}
-	if(s.pppol2tp.sa_family != AF_PPPOX) {
-		fatal("Socket of not a PPPoX socket");
+	if(sax.sa_family != AF_PPPOX || sax.sa_protocol != PX_PROTO_OL2TP) {
+		fatal("Socket is not a PPPoL2TP socket");
 	}
 
 	/* Do a test getsockopt() to ensure that the kernel has the necessary
 	 * feature available.
-	 */
+	 * driver returns -ENOTCONN until session established!
 	if (getsockopt(pppol2tp_fd, SOL_PPPOL2TP, PPPOL2TP_SO_DEBUG,
 		       &tmp, &tmp_len) < 0) {
 		fatal("PPPoL2TP kernel driver not installed");
-	}
+	} */
 
 	/* Setup option defaults. Compression options are disabled! */
 
@@ -177,10 +171,16 @@ static int setdevname_pppol2tp(char **ar
 
 static int connect_pppol2tp(void)
 {
+	struct sockaddr_pppol2tp sax;
+	int len = sizeof(sax);
+
 	if(pppol2tp_fd == -1) {
 		fatal("No PPPoL2TP FD specified");
 	}
 
+	getsockname(pppol2tp_fd, (struct sockaddr *)&sax, &len);
+	sprintf(ppp_devnam,"l2tp (%s)",inet_ntoa(sax.pppol2tp.addr.sin_addr));
+
 	return pppol2tp_fd;
 }
 
@@ -479,13 +479,13 @@ static void pppol2tp_check_options(void)
 		snoop_send_hook = pppol2tp_lcp_snoop_send;
 	}
 
-	/* Hook up ip up/down hooks to send indicator to openl2tpd
-	 * that the link is up
-	 */
-	old_ip_up_hook = ip_up_hook;
-	ip_up_hook = pppol2tp_ip_up_hook;
-	old_ip_down_hook = ip_down_hook;
-	ip_down_hook = pppol2tp_ip_down_hook;
+	/* If pppol2tp_ifname not supplied, use ip_up_hook to discover interface */
+	if (!pppol2tp_ifname[0]) {
+		old_ip_up_hook = ip_up_hook;
+		ip_up_hook = pppol2tp_ip_up_hook;
+		old_ip_down_hook = ip_down_hook;
+		ip_down_hook = pppol2tp_ip_down_hook;
+	}
 }
 
 /* Called just before pppd exits.
